[{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://emilmip.github.io/LTFGRS/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://emilmip.github.io/LTFGRS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jane Doe. Author, maintainer.","code":""},{"path":"https://emilmip.github.io/LTFGRS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Doe J (2025). LTFGRS: Package (Title Case). R package version 0.1.0, https://emilmip.github.io/LTFGRS/.","code":"@Manual{,   title = {LTFGRS: What the Package Does (Title Case)},   author = {Jane Doe},   year = {2025},   note = {R package version 0.1.0},   url = {https://emilmip.github.io/LTFGRS/}, }"},{"path":"https://emilmip.github.io/LTFGRS/reference/LTFGRS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"LTFGRS: What the Package Does (Title Case) — LTFGRS-package","title":"LTFGRS: What the Package Does (Title Case) — LTFGRS-package","text":"(maybe one line). Continuation lines indented.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/LTFGRS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LTFGRS: What the Package Does (Title Case) — LTFGRS-package","text":"Maintainer: Jane Doe jane@example.com","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"construct_covmat returns covariance matrix underlying target individual variable number family members variable number phenotypes. wrapper around construct_covmat_single construct_covmat_multi.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"","code":"construct_covmat(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL )"},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side).  Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. h2 Either number representing heritability liability scale one single phenotype numeric vector representing liability-scale heritabilities positive number phenotypes. entries h2 must non-negative 1. genetic_corrmat Either NULL numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL  numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"either fam_vec n_fam used argument, required format, add_ind logical scalar h2 number satisfying $$0 \\leq h2 \\leq 1$$, function construct_covmat return named covariance matrix, row- column-number corresponds length fam_vec n_fam (+ 2 add_ind=TRUE). However, h2 numeric vector satisfying $$0 \\leq h2_i \\leq 1$$ $$\\\\{1,...,n_pheno\\}$$ genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, construct_covmat return named covariance matrix, number rows columns corresponds number phenotypes times length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec n_fam equal c() NULL, function returns either \\(2 \\times 2\\) matrix holding correlation genetic component full liability full liability individual consideration, $$(2 \\times n_pheno) \\times (2\\times n_pheno)$$ matrix holding correlation genetic component full liability full liability underlying individual phenotypes. fam_vec n_fam specified, user asked decide two vectors use. Note returned object different attributes, fam_vec, n_fam, add_ind h2.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"function can used construct covariance matrix given number family members. h2 number, entry covariance matrix equals percentage shared DNA corresponding individuals times liability-scale heritability $$h^2$$. However, h2 numeric vector, genetic_corrmat full_corrmat two symmetric correlation matrices, entry equals either percentage shared DNA corresponding individuals times liability-scale heritability $$h^2$$ percentage shared DNA corresponding individuals times correlation corresponding phenotypes. family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"","code":"construct_covmat() #>         g     o    m    f    s1   mgm   mgf   pgm   pgf #> g   0.500 0.500 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> o   0.500 1.000 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> m   0.250 0.250 1.00 0.00 0.250 0.250 0.250 0.000 0.000 #> f   0.250 0.250 0.00 1.00 0.250 0.000 0.000 0.250 0.250 #> s1  0.250 0.250 0.25 0.25 1.000 0.125 0.125 0.125 0.125 #> mgm 0.125 0.125 0.25 0.00 0.125 1.000 0.000 0.000 0.000 #> mgf 0.125 0.125 0.25 0.00 0.125 0.000 1.000 0.000 0.000 #> pgm 0.125 0.125 0.00 0.25 0.125 0.000 0.000 1.000 0.000 #> pgf 0.125 0.125 0.00 0.25 0.125 0.000 0.000 0.000 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"),                  n_fam = NULL,                  add_ind = TRUE,                  h2 = 0.5) #>          g     o    m   mgm   mgf  mhs1  mhs2  mau1 #> g    0.500 0.500 0.25 0.125 0.125 0.125 0.125 0.125 #> o    0.500 1.000 0.25 0.125 0.125 0.125 0.125 0.125 #> m    0.250 0.250 1.00 0.250 0.250 0.250 0.250 0.250 #> mgm  0.125 0.125 0.25 1.000 0.000 0.125 0.125 0.250 #> mgf  0.125 0.125 0.25 0.000 1.000 0.125 0.125 0.250 #> mhs1 0.125 0.125 0.25 0.125 0.125 1.000 0.250 0.125 #> mhs2 0.125 0.125 0.25 0.125 0.125 0.250 1.000 0.125 #> mau1 0.125 0.125 0.25 0.250 0.250 0.125 0.125 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat(fam_vec = NULL,                  n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")),                  add_ind = FALSE,                  h2 = 0.3) #>         m   mgm   mgf    s1    s2  mhs1  mhs2 #> m    1.00 0.150 0.150 0.150 0.150 0.150 0.150 #> mgm  0.15 1.000 0.000 0.075 0.075 0.075 0.075 #> mgf  0.15 0.000 1.000 0.075 0.075 0.075 0.075 #> s1   0.15 0.075 0.075 1.000 0.150 0.075 0.075 #> s2   0.15 0.075 0.075 0.150 1.000 0.075 0.075 #> mhs1 0.15 0.075 0.075 0.075 0.075 1.000 0.150 #> mhs2 0.15 0.075 0.075 0.075 0.075 0.150 1.000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.3 construct_covmat(h2 = c(0.5,0.5), genetic_corrmat = matrix(c(1,0.4,0.4,1), nrow = 2),                  full_corrmat = matrix(c(1,0.6,0.6,1), nrow = 2)) #>                g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 #> g_phenotype1          0.500        0.500         0.25         0.25 #> o_phenotype1          0.500        1.000         0.25         0.25 #> m_phenotype1          0.250        0.250         1.00         0.00 #> f_phenotype1          0.250        0.250         0.00         1.00 #> s1_phenotype1         0.250        0.250         0.25         0.25 #> mgm_phenotype1        0.125        0.125         0.25         0.00 #> mgf_phenotype1        0.125        0.125         0.25         0.00 #> pgm_phenotype1        0.125        0.125         0.00         0.25 #> pgf_phenotype1        0.125        0.125         0.00         0.25 #> g_phenotype2          0.200        0.200         0.10         0.10 #> o_phenotype2          0.200        0.600         0.10         0.10 #> m_phenotype2          0.100        0.100         0.60         0.00 #> f_phenotype2          0.100        0.100         0.00         0.60 #> s1_phenotype2         0.100        0.100         0.10         0.10 #> mgm_phenotype2        0.050        0.050         0.10         0.00 #> mgf_phenotype2        0.050        0.050         0.10         0.00 #> pgm_phenotype2        0.050        0.050         0.00         0.10 #> pgf_phenotype2        0.050        0.050         0.00         0.10 #>                s1_phenotype1 mgm_phenotype1 mgf_phenotype1 pgm_phenotype1 #> g_phenotype1           0.250          0.125          0.125          0.125 #> o_phenotype1           0.250          0.125          0.125          0.125 #> m_phenotype1           0.250          0.250          0.250          0.000 #> f_phenotype1           0.250          0.000          0.000          0.250 #> s1_phenotype1          1.000          0.125          0.125          0.125 #> mgm_phenotype1         0.125          1.000          0.000          0.000 #> mgf_phenotype1         0.125          0.000          1.000          0.000 #> pgm_phenotype1         0.125          0.000          0.000          1.000 #> pgf_phenotype1         0.125          0.000          0.000          0.000 #> g_phenotype2           0.100          0.050          0.050          0.050 #> o_phenotype2           0.100          0.050          0.050          0.050 #> m_phenotype2           0.100          0.100          0.100          0.000 #> f_phenotype2           0.100          0.000          0.000          0.100 #> s1_phenotype2          0.600          0.050          0.050          0.050 #> mgm_phenotype2         0.050          0.600          0.000          0.000 #> mgf_phenotype2         0.050          0.000          0.600          0.000 #> pgm_phenotype2         0.050          0.000          0.000          0.600 #> pgf_phenotype2         0.050          0.000          0.000          0.000 #>                pgf_phenotype1 g_phenotype2 o_phenotype2 m_phenotype2 #> g_phenotype1            0.125        0.200        0.200         0.10 #> o_phenotype1            0.125        0.200        0.600         0.10 #> m_phenotype1            0.000        0.100        0.100         0.60 #> f_phenotype1            0.250        0.100        0.100         0.00 #> s1_phenotype1           0.125        0.100        0.100         0.10 #> mgm_phenotype1          0.000        0.050        0.050         0.10 #> mgf_phenotype1          0.000        0.050        0.050         0.10 #> pgm_phenotype1          0.000        0.050        0.050         0.00 #> pgf_phenotype1          1.000        0.050        0.050         0.00 #> g_phenotype2            0.050        0.500        0.500         0.25 #> o_phenotype2            0.050        0.500        1.000         0.25 #> m_phenotype2            0.000        0.250        0.250         1.00 #> f_phenotype2            0.100        0.250        0.250         0.00 #> s1_phenotype2           0.050        0.250        0.250         0.25 #> mgm_phenotype2          0.000        0.125        0.125         0.25 #> mgf_phenotype2          0.000        0.125        0.125         0.25 #> pgm_phenotype2          0.000        0.125        0.125         0.00 #> pgf_phenotype2          0.600        0.125        0.125         0.00 #>                f_phenotype2 s1_phenotype2 mgm_phenotype2 mgf_phenotype2 #> g_phenotype1           0.10         0.100          0.050          0.050 #> o_phenotype1           0.10         0.100          0.050          0.050 #> m_phenotype1           0.00         0.100          0.100          0.100 #> f_phenotype1           0.60         0.100          0.000          0.000 #> s1_phenotype1          0.10         0.600          0.050          0.050 #> mgm_phenotype1         0.00         0.050          0.600          0.000 #> mgf_phenotype1         0.00         0.050          0.000          0.600 #> pgm_phenotype1         0.10         0.050          0.000          0.000 #> pgf_phenotype1         0.10         0.050          0.000          0.000 #> g_phenotype2           0.25         0.250          0.125          0.125 #> o_phenotype2           0.25         0.250          0.125          0.125 #> m_phenotype2           0.00         0.250          0.250          0.250 #> f_phenotype2           1.00         0.250          0.000          0.000 #> s1_phenotype2          0.25         1.000          0.125          0.125 #> mgm_phenotype2         0.00         0.125          1.000          0.000 #> mgf_phenotype2         0.00         0.125          0.000          1.000 #> pgm_phenotype2         0.25         0.125          0.000          0.000 #> pgf_phenotype2         0.25         0.125          0.000          0.000 #>                pgm_phenotype2 pgf_phenotype2 #> g_phenotype1            0.050          0.050 #> o_phenotype1            0.050          0.050 #> m_phenotype1            0.000          0.000 #> f_phenotype1            0.100          0.100 #> s1_phenotype1           0.050          0.050 #> mgm_phenotype1          0.000          0.000 #> mgf_phenotype1          0.000          0.000 #> pgm_phenotype1          0.600          0.000 #> pgf_phenotype1          0.000          0.600 #> g_phenotype2            0.125          0.125 #> o_phenotype2            0.125          0.125 #> m_phenotype2            0.000          0.000 #> f_phenotype2            0.250          0.250 #> s1_phenotype2           0.125          0.125 #> mgm_phenotype2          0.000          0.000 #> mgf_phenotype2          0.000          0.000 #> pgm_phenotype2          1.000          0.000 #> pgf_phenotype2          0.000          1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 0.5 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.4 #> [2,]  0.4  1.0 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"construct_covmat_multi returns covariance matrix underlying target individual variable number family members multiple phenotypes.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"","code":"construct_covmat_multi(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   genetic_corrmat,   full_corrmat,   h2_vec,   phen_names = NULL )"},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side).  Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. h2_vec numeric vector representing liability-scale heritabilities phenotypes. entries h2_vec must non-negative 1. phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, h2_vec numeric vector satisfying \\(0 \\leq h2_i \\leq 1\\) \\(\\\\{1,...,n_pheno\\}\\), output named covariance matrix. number rows columns corresponds number phenotypes times length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec n_fam equal c() NULL, function returns \\((2 \\times n_pheno) \\times (2\\times n_pheno)\\) matrix holding correlation genetic component full liability full liability underlying individual phenotypes. fam_vec n_fam specified, user asked decide two vectors use. Note returned object number different attributes,namely fam_vec, n_fam, add_ind, genetic_corrmat, full_corrmat, h2 phenotype_names.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"function can used construct covariance matrix given number family members. entry covariance matrix equals either percentage shared DNA corresponding individuals times liability-scale heritability \\(h^2\\) percentage shared DNA corresponding individuals times correlation corresponding phenotypes. , phenotype, covariance combinations genetic component full liability full liability given $$\\text{Cov}\\left( l_g, l_g \\right) = h^2,$$ $$\\text{Cov}\\left( l_g, l_o \\right) = h^2,$$ $$\\text{Cov}\\left( l_o, l_g \\right) = h^2$$ $$\\text{Cov}\\left( l_o, l_o \\right) = 1.$$ two different phenotypes, covariance given $$\\text{Cov}\\left( l_g^1, l_g^2 \\right) = \\rho_g^{1,2},$$ $$\\text{Cov}\\left( l_g^1, l_o^2 \\right) = \\rho_g^{1,2},$$ $$\\text{Cov}\\left( l_o^1, l_g^2 \\right) = \\rho_g^{1,2}$$ $$\\text{Cov}\\left( l_o^1, l_o^2 \\right) = \\rho_g^{1,2} + \\rho_e^{1,2},$$ \\(l_g^\\) \\(l_o^\\) genetic component full liability full liability phenotype \\(\\), respectively, \\(\\rho_g^{,j}\\) genetic correlation phenotype \\(\\) \\(j\\) \\(\\rho_e^{1,2}\\) environmental correlation phenotype \\(\\) \\(j\\). family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"","code":"construct_covmat_multi(fam_vec = NULL,                        genetic_corrmat = matrix(c(1, 0.5, 0.5, 1), nrow = 2),                        full_corrmat = matrix(c(1, 0.55, 0.55, 1), nrow = 2),                        h2_vec = c(0.37,0.44),                        phen_names = c(\"p1\",\"p2\")) #> Warning:  #>  Neither fam_vec nor n_fam is specified... #>      g_p1 o_p1 g_p2 o_p2 #> g_p1 0.37 0.37 0.50 0.50 #> o_p1 0.37 1.00 0.50 0.55 #> g_p2 0.50 0.50 0.44 0.44 #> o_p2 0.50 0.55 0.44 1.00 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" #> attr(,\"n_fam\") #> g o  #> 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.37 0.44 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.5 #> [2,]  0.5  1.0 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,] 1.00 0.55 #> [2,] 0.55 1.00 #> attr(,\"phenotype_names\") #> [1] \"p1\" \"p2\" construct_covmat_multi(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"),                        n_fam = NULL,                        add_ind = TRUE,                        genetic_corrmat = diag(3),                        full_corrmat = diag(3),                        h2_vec = c(0.8, 0.65)) #>                 g_phenotype1 o_phenotype1 m_phenotype1 mgm_phenotype1 #> g_phenotype1             0.8          0.8          0.4            0.2 #> o_phenotype1             0.8          1.0          0.4            0.2 #> m_phenotype1             0.4          0.4          1.0            0.4 #> mgm_phenotype1           0.2          0.2          0.4            1.0 #> mgf_phenotype1           0.2          0.2          0.4            0.0 #> mhs1_phenotype1          0.2          0.2          0.4            0.2 #> mhs2_phenotype1          0.2          0.2          0.4            0.2 #> mau1_phenotype1          0.2          0.2          0.4            0.4 #> g_phenotype2             0.0          0.0          0.0            0.0 #> o_phenotype2             0.0          0.0          0.0            0.0 #> m_phenotype2             0.0          0.0          0.0            0.0 #> mgm_phenotype2           0.0          0.0          0.0            0.0 #> mgf_phenotype2           0.0          0.0          0.0            0.0 #> mhs1_phenotype2          0.0          0.0          0.0            0.0 #> mhs2_phenotype2          0.0          0.0          0.0            0.0 #> mau1_phenotype2          0.0          0.0          0.0            0.0 #>                 mgf_phenotype1 mhs1_phenotype1 mhs2_phenotype1 mau1_phenotype1 #> g_phenotype1               0.2             0.2             0.2             0.2 #> o_phenotype1               0.2             0.2             0.2             0.2 #> m_phenotype1               0.4             0.4             0.4             0.4 #> mgm_phenotype1             0.0             0.2             0.2             0.4 #> mgf_phenotype1             1.0             0.2             0.2             0.4 #> mhs1_phenotype1            0.2             1.0             0.4             0.2 #> mhs2_phenotype1            0.2             0.4             1.0             0.2 #> mau1_phenotype1            0.4             0.2             0.2             1.0 #> g_phenotype2               0.0             0.0             0.0             0.0 #> o_phenotype2               0.0             0.0             0.0             0.0 #> m_phenotype2               0.0             0.0             0.0             0.0 #> mgm_phenotype2             0.0             0.0             0.0             0.0 #> mgf_phenotype2             0.0             0.0             0.0             0.0 #> mhs1_phenotype2            0.0             0.0             0.0             0.0 #> mhs2_phenotype2            0.0             0.0             0.0             0.0 #> mau1_phenotype2            0.0             0.0             0.0             0.0 #>                 g_phenotype2 o_phenotype2 m_phenotype2 mgm_phenotype2 #> g_phenotype1          0.0000       0.0000        0.000         0.0000 #> o_phenotype1          0.0000       0.0000        0.000         0.0000 #> m_phenotype1          0.0000       0.0000        0.000         0.0000 #> mgm_phenotype1        0.0000       0.0000        0.000         0.0000 #> mgf_phenotype1        0.0000       0.0000        0.000         0.0000 #> mhs1_phenotype1       0.0000       0.0000        0.000         0.0000 #> mhs2_phenotype1       0.0000       0.0000        0.000         0.0000 #> mau1_phenotype1       0.0000       0.0000        0.000         0.0000 #> g_phenotype2          0.6500       0.6500        0.325         0.1625 #> o_phenotype2          0.6500       1.0000        0.325         0.1625 #> m_phenotype2          0.3250       0.3250        1.000         0.3250 #> mgm_phenotype2        0.1625       0.1625        0.325         1.0000 #> mgf_phenotype2        0.1625       0.1625        0.325         0.0000 #> mhs1_phenotype2       0.1625       0.1625        0.325         0.1625 #> mhs2_phenotype2       0.1625       0.1625        0.325         0.1625 #> mau1_phenotype2       0.1625       0.1625        0.325         0.3250 #>                 mgf_phenotype2 mhs1_phenotype2 mhs2_phenotype2 mau1_phenotype2 #> g_phenotype1            0.0000          0.0000          0.0000          0.0000 #> o_phenotype1            0.0000          0.0000          0.0000          0.0000 #> m_phenotype1            0.0000          0.0000          0.0000          0.0000 #> mgm_phenotype1          0.0000          0.0000          0.0000          0.0000 #> mgf_phenotype1          0.0000          0.0000          0.0000          0.0000 #> mhs1_phenotype1         0.0000          0.0000          0.0000          0.0000 #> mhs2_phenotype1         0.0000          0.0000          0.0000          0.0000 #> mau1_phenotype1         0.0000          0.0000          0.0000          0.0000 #> g_phenotype2            0.1625          0.1625          0.1625          0.1625 #> o_phenotype2            0.1625          0.1625          0.1625          0.1625 #> m_phenotype2            0.3250          0.3250          0.3250          0.3250 #> mgm_phenotype2          0.0000          0.1625          0.1625          0.3250 #> mgf_phenotype2          1.0000          0.1625          0.1625          0.3250 #> mhs1_phenotype2         0.1625          1.0000          0.3250          0.1625 #> mhs2_phenotype2         0.1625          0.3250          1.0000          0.1625 #> mau1_phenotype2         0.3250          0.1625          0.1625          1.0000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.80 0.65 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"full_corrmat\") #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\" construct_covmat_multi(fam_vec = NULL,                        n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")),                        add_ind = FALSE,                        genetic_corrmat = diag(2),                        full_corrmat = diag(2),                        h2_vec = c(0.75,0.85)) #>                 m_phenotype1 mgm_phenotype1 mgf_phenotype1 s1_phenotype1 #> m_phenotype1           1.000         0.3750         0.3750        0.3750 #> mgm_phenotype1         0.375         1.0000         0.0000        0.1875 #> mgf_phenotype1         0.375         0.0000         1.0000        0.1875 #> s1_phenotype1          0.375         0.1875         0.1875        1.0000 #> s2_phenotype1          0.375         0.1875         0.1875        0.3750 #> mhs1_phenotype1        0.375         0.1875         0.1875        0.1875 #> mhs2_phenotype1        0.375         0.1875         0.1875        0.1875 #> m_phenotype2           0.000         0.0000         0.0000        0.0000 #> mgm_phenotype2         0.000         0.0000         0.0000        0.0000 #> mgf_phenotype2         0.000         0.0000         0.0000        0.0000 #> s1_phenotype2          0.000         0.0000         0.0000        0.0000 #> s2_phenotype2          0.000         0.0000         0.0000        0.0000 #> mhs1_phenotype2        0.000         0.0000         0.0000        0.0000 #> mhs2_phenotype2        0.000         0.0000         0.0000        0.0000 #>                 s2_phenotype1 mhs1_phenotype1 mhs2_phenotype1 m_phenotype2 #> m_phenotype1           0.3750          0.3750          0.3750        0.000 #> mgm_phenotype1         0.1875          0.1875          0.1875        0.000 #> mgf_phenotype1         0.1875          0.1875          0.1875        0.000 #> s1_phenotype1          0.3750          0.1875          0.1875        0.000 #> s2_phenotype1          1.0000          0.1875          0.1875        0.000 #> mhs1_phenotype1        0.1875          1.0000          0.3750        0.000 #> mhs2_phenotype1        0.1875          0.3750          1.0000        0.000 #> m_phenotype2           0.0000          0.0000          0.0000        1.000 #> mgm_phenotype2         0.0000          0.0000          0.0000        0.425 #> mgf_phenotype2         0.0000          0.0000          0.0000        0.425 #> s1_phenotype2          0.0000          0.0000          0.0000        0.425 #> s2_phenotype2          0.0000          0.0000          0.0000        0.425 #> mhs1_phenotype2        0.0000          0.0000          0.0000        0.425 #> mhs2_phenotype2        0.0000          0.0000          0.0000        0.425 #>                 mgm_phenotype2 mgf_phenotype2 s1_phenotype2 s2_phenotype2 #> m_phenotype1            0.0000         0.0000        0.0000        0.0000 #> mgm_phenotype1          0.0000         0.0000        0.0000        0.0000 #> mgf_phenotype1          0.0000         0.0000        0.0000        0.0000 #> s1_phenotype1           0.0000         0.0000        0.0000        0.0000 #> s2_phenotype1           0.0000         0.0000        0.0000        0.0000 #> mhs1_phenotype1         0.0000         0.0000        0.0000        0.0000 #> mhs2_phenotype1         0.0000         0.0000        0.0000        0.0000 #> m_phenotype2            0.4250         0.4250        0.4250        0.4250 #> mgm_phenotype2          1.0000         0.0000        0.2125        0.2125 #> mgf_phenotype2          0.0000         1.0000        0.2125        0.2125 #> s1_phenotype2           0.2125         0.2125        1.0000        0.4250 #> s2_phenotype2           0.2125         0.2125        0.4250        1.0000 #> mhs1_phenotype2         0.2125         0.2125        0.2125        0.2125 #> mhs2_phenotype2         0.2125         0.2125        0.2125        0.2125 #>                 mhs1_phenotype2 mhs2_phenotype2 #> m_phenotype1             0.0000          0.0000 #> mgm_phenotype1           0.0000          0.0000 #> mgf_phenotype1           0.0000          0.0000 #> s1_phenotype1            0.0000          0.0000 #> s2_phenotype1            0.0000          0.0000 #> mhs1_phenotype1          0.0000          0.0000 #> mhs2_phenotype1          0.0000          0.0000 #> m_phenotype2             0.4250          0.4250 #> mgm_phenotype2           0.2125          0.2125 #> mgf_phenotype2           0.2125          0.2125 #> s1_phenotype2            0.2125          0.2125 #> s2_phenotype2            0.2125          0.2125 #> mhs1_phenotype2          1.0000          0.4250 #> mhs2_phenotype2          0.4250          1.0000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.75 0.85 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"construct_covmatc_single returns covariance matrix underlying target individual variable number family members","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"","code":"construct_covmat_single(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. h2 number representing squared heritability liability scale single phenotype. Must non-negative 1. Defaults 0.5.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"either fam_vec n_fam used argument, required format h2 number satisfying \\(0 \\leq h2 \\leq 1\\), output named covariance matrix. number rows columns corresponds length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec = c()/NULL n_fam = c()/NULL, function returns \\(2 \\times 2\\) matrix holding correlation genetic component full liability full liability individual. fam_vec n_fam given, user asked decide two vectors use. Note returned object different attributes, fam_vec, n_fam, add_ind h2.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"function can used construct covariance matrix given number family members. entry covariance matrix equals percentage shared DNA corresponding individuals times liability-scale heritability \\(h^2\\). family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/construct_covmat_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"","code":"construct_covmat_single() #>         g     o    m    f    s1   mgm   mgf   pgm   pgf #> g   0.500 0.500 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> o   0.500 1.000 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> m   0.250 0.250 1.00 0.00 0.250 0.250 0.250 0.000 0.000 #> f   0.250 0.250 0.00 1.00 0.250 0.000 0.000 0.250 0.250 #> s1  0.250 0.250 0.25 0.25 1.000 0.125 0.125 0.125 0.125 #> mgm 0.125 0.125 0.25 0.00 0.125 1.000 0.000 0.000 0.000 #> mgf 0.125 0.125 0.25 0.00 0.125 0.000 1.000 0.000 0.000 #> pgm 0.125 0.125 0.00 0.25 0.125 0.000 0.000 1.000 0.000 #> pgf 0.125 0.125 0.00 0.25 0.125 0.000 0.000 0.000 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat_single(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"), n_fam = NULL, add_ind = TRUE, h2 = 0.5) #>          g     o    m   mgm   mgf  mhs1  mhs2  mau1 #> g    0.500 0.500 0.25 0.125 0.125 0.125 0.125 0.125 #> o    0.500 1.000 0.25 0.125 0.125 0.125 0.125 0.125 #> m    0.250 0.250 1.00 0.250 0.250 0.250 0.250 0.250 #> mgm  0.125 0.125 0.25 1.000 0.000 0.125 0.125 0.250 #> mgf  0.125 0.125 0.25 0.000 1.000 0.125 0.125 0.250 #> mhs1 0.125 0.125 0.25 0.125 0.125 1.000 0.250 0.125 #> mhs2 0.125 0.125 0.25 0.125 0.125 0.250 1.000 0.125 #> mau1 0.125 0.125 0.25 0.250 0.250 0.125 0.125 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat_single(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")), add_ind = FALSE, h2 = 0.3) #>         m   mgm   mgf    s1    s2  mhs1  mhs2 #> m    1.00 0.150 0.150 0.150 0.150 0.150 0.150 #> mgm  0.15 1.000 0.000 0.075 0.075 0.075 0.075 #> mgf  0.15 0.000 1.000 0.075 0.075 0.075 0.075 #> s1   0.15 0.075 0.075 1.000 0.150 0.075 0.075 #> s2   0.15 0.075 0.075 0.150 1.000 0.075 0.075 #> mhs1 0.15 0.075 0.075 0.075 0.075 1.000 0.150 #> mhs2 0.15 0.075 0.075 0.075 0.075 0.150 1.000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.3"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert age to cumulative incidence rate — convert_age_to_cir","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"convert_age_to_cir computes cumulative incidence rate person's age.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"","code":"convert_age_to_cir(age, pop_prev = 0.1, mid_point = 60, slope = 1/8)"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"age non-negative number representing individual's age. pop_prev positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point positive number representing mid point logistic function. Defaults 60. slope number holding rate increase. Defaults 1/8.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"age mid_point positive numbers, pop_prev positive number 0 1 slope valid number, convert_age_to_cir returns number, equal cumulative incidence rate.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"Given person's age, convert_age_to_cir can used compute cumulative incidence rate (cir), given formula $$pop\\_ prev / (1 + exp((mid\\_ point - age) * slope))$$","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_cir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"","code":"curve(sapply(age, convert_age_to_cir), from = 10, to = 110, xname = \"age\")"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert age to threshold — convert_age_to_thresh","title":"Convert age to threshold — convert_age_to_thresh","text":"convert_age_to_thresh computes threshold person's age using either logistic function truncated normal distribution","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert age to threshold — convert_age_to_thresh","text":"","code":"convert_age_to_thresh(   age,   dist = \"logistic\",   pop_prev = 0.1,   mid_point = 60,   slope = 1/8,   min_age = 10,   max_age = 90,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert age to threshold — convert_age_to_thresh","text":"age non-negative number representing individual's age. dist string indicating distribution use. dist = \"logistic\", logistic function used compute age onset. dist = \"normal\", truncated normal distribution used instead. Defaults \"logistic\". pop_prev necessary dist = \"logistic\". positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point necessary dist = \"logistic\". positive number representing mid point logistic function. Defaults 60. slope necessary dist = \"logistic\". number holding rate increase. Defaults 1/8. min_age necessary dist = \"normal\". positive number representing individual's earliest age. Defaults 10. max_age necessary dist = \"normal\". positive number representing individual's latest age. Must greater min_aoo. Defaults 90. lower necessary dist = \"normal\". number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper necessary dist = \"normal\". number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert age to threshold — convert_age_to_thresh","text":"age positive number necessary arguments valid, convert_age_to_thresh returns number, equal threshold.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert age to threshold — convert_age_to_thresh","text":"Given person's age, convert_age_to_thresh can used first compute cumulative incidence rate (cir), used compute threshold using either logistic function truncated normal distribution. logistic function, formula used compute threshold individual's age given $$qnorm(pop\\_ prev / (1 + exp((mid\\_ point - age) * slope)), lower.tail = F)$$, given $$qnorm((1 - (age-min\\_ age)/max\\_ age) * (pnorm(upper) - pnorm(lower)) + pnorm(lower))$$ truncated normal distribution.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_age_to_thresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert age to threshold — convert_age_to_thresh","text":"","code":"curve(sapply(age, convert_age_to_thresh), from = 10, to = 110, xname = \"age\")"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert cumulative incidence rate to age — convert_cir_to_age","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"convert_cir_to_age computes age person's cumulative incidence rate.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"","code":"convert_cir_to_age(cir, pop_prev = 0.1, mid_point = 60, slope = 1/8)"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"cir positive number representing individual's cumulative incidence rate. pop_prev positive number representing overall population prevalence. Must 1 must larger cir. Defaults 0.1. mid_point positive number representing mid point logistic function. Defaults 60. slope number holding rate increase. Defaults 1/8.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"cir mid_point positive numbers, pop_prev positive number 0 1 slope valid number, convert_cir_to_age returns number, equal current age.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"Given person's cumulative incidence rate (cir), convert_cir_to_age can used compute corresponding age, given $$mid\\_ point - \\log(pop\\_ prev/cir - 1) * 1/slope$$","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_cir_to_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"","code":"curve(sapply(cir, convert_cir_to_age), from = 0.001, to = 0.099, xname = \"cir\")"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempts to convert the list entry input format to a long format — convert_format","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"Attempts convert list entry input format long format","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"","code":"convert_format(family, threshs, personal_id_col = \"pid\", role_col = NULL)"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"family tibble two entries, family id personal id. personal id end \"_role\", role column present. threshs thresholds, personal id (without role) well lower upper thresholds personal_id_col column name holds personal id role_col column name holds role","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"returns format similar prepare_LTFHPlus_input, used estimate_liability","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"","code":"family <- data.frame( fam_id = c(1, 1, 1, 1), pid = c(1, 2, 3, 4), role = c(\"o\", \"m\", \"f\", \"pgf\") )  threshs <- data.frame(   pid = c(1, 2, 3, 4),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7) )  convert_format(family, threshs) #>   fam_id pid role lower upper #> 1      1   1    o  -Inf   0.8 #> 2      1   2    m  -Inf   0.8 #> 3      1   3    f   0.8   0.8 #> 4      1   4  pgf   0.7   0.7"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert liability to age of onset — convert_liability_to_aoo","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"convert_liability_to_aoo computes age onset individual's true underlying liability using either logistic function truncated normal distribution.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"","code":"convert_liability_to_aoo(   liability,   dist = \"logistic\",   pop_prev = 0.1,   mid_point = 60,   slope = 1/8,   min_aoo = 10,   max_aoo = 90,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"liability number representing individual's true underlying liability. dist string indicating distribution use. dist = \"logistic\", logistic function used compute age onset. dist = \"normal\", truncated normal distribution used instead. Defaults \"logistic\". pop_prev necessary dist = \"logistic\". positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point necessary dist = \"logistic\". positive number representing mid point logistic function. Defaults 60. slope necessary dist = \"logistic\". number holding rate increase. Defaults 1/8. min_aoo necessary dist = \"normal\". positive number representing individual's earliest age onset. Defaults 10. max_aoo necessary dist = \"normal\". positive number representing individual's latest age onset. Must greater min_aoo. Defaults 90. lower necessary dist = \"normal\". number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper necessary dist = \"normal\". number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"liability number necessary arguments valid, convert_liability_to_aoo returns positive number, equal age onset.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"Given person's cumulative incidence rate (cir), convert_liability_to_aoo can used compute corresponding age. logistic function, age given $$mid\\_ point - log(pop\\_ prev/cir - 1) * 1/slope$$, given $$(1 - truncated\\_ normal\\_ cdf(liability = liability, lower = lower , upper = upper)) * max\\_ aoo + min\\_ aoo$$ truncated normal distribution.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_liability_to_aoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"","code":"curve(sapply(liability, convert_liability_to_aoo), from = 1.3, to = 3.5, xname = \"liability\")  curve(sapply(liability, convert_liability_to_aoo, dist = \"normal\"),  from = qnorm(0.05, lower.tail = FALSE), to = 3.5, xname = \"liability\")"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"convert_observed_to_liability_scale transforms heritability observed scale heritability liability scale.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"","code":"convert_observed_to_liability_scale(   obs_h2 = 0.5,   pop_prev = 0.05,   prop_cases = 0.5 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"obs_h2 number numeric vector representing liability-scale heritability(ies)observed scale. Must non-negative 1. Defaults 0.5 pop_prev number numeric vector representing population prevalence(s). entries must non-negative one. vector, must length obs_h2. Defaults 0.05. prop_cases Either NULL number numeric vector representing proportion cases sample. entries must non-negative one. vector, must length obs_h2. Defaults 0.5.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"obs_h2, pop_prev prop_cases non-negative numbers one, function returns heritability liability scale using Equation 23 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002 . obs_h2, pop_prev prop_cases non-negative numeric vectors entries one, function returns vector length obs_h2. entry holds heritability liability scale obtained corresponding entry obs_h2 using Equation 23. obs_h2 pop_prev non-negative numbers one prop_cases NULL, function returns heritability liability scale using Equation 17 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002 . obs_h2 pop_prev non-negative numeric vectors entries one, prop_cases NULL, convert_observed_to_liability_scale returns vector length obq_h2. entry holds liability-scale heritability obtained corresponding entry obs_h2 using Equation 17.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"function can used transform heritability observed scale liability scale. convert_observed_to_liability_scale uses either Equation 17 (prop_cases = NULL) Equation 23 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002  transform heritability observed scale heritability liability scale.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"Sang Hong Lee, Naomi R. Wray, Michael E. Goddard, Peter M. Visscher (2011, March). Estimating Missing Heritability Diseases Genome-wide Association Studies. American Journal Human Genetics (Vol. 88, Issue 3, pp. 294-305). doi:10.1016/j.ajhg.2011.02.002","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/convert_observed_to_liability_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"","code":"convert_observed_to_liability_scale() #> [1] 0.4242283 convert_observed_to_liability_scale(prop_cases=NULL) #> [1] 2.232781 convert_observed_to_liability_scale(obs_h2 = 0.8, pop_prev = 1/44,                                     prop_cases = NULL) #> [1] 6.105859 convert_observed_to_liability_scale(obs_h2 = c(0.5,0.8),                                     pop_prev = c(0.05, 1/44),                                     prop_cases = NULL) #> [1] 2.232781 6.105859"},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":null,"dir":"Reference","previous_headings":"","what":"Positive definite matrices — correct_positive_definite","title":"Positive definite matrices — correct_positive_definite","text":"correct_positive_definite verifies given covariance matrix indeed positive definite checking eigenvalues positive. given covariance matrix positive definite, correct_positive_definite tries modify underlying correlation matrices genetic_corrmat full_corrmat order obtain positive definite covariance matrix.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positive definite matrices — correct_positive_definite","text":"","code":"correct_positive_definite(   covmat,   correction_val = 0.99,   correction_limit = 100 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positive definite matrices — correct_positive_definite","text":"covmat symmetric numeric matrix. covariance matrix corrected, must number attributes, attr(covmat,\"fam_vec\"), attr(covmat,\"n_fam\"), attr(covmat,\"add_ind\"), attr(covmat,\"h2\"), attr(covmat,\"genetic_corrmat\"), attr(covmat,\"full_corrmat\") attr(covmat,\"phenotype_names\"). covariance matrix obtained construct_covmat, construct_covmat_single construct_covmat_multi attributes default. correction_val positive number representing amount genetic_corrmat full_corrmat changed, eigenvalues non-positive. , correction_val number multiplied off_diagonal entries genetic_corrmat full_corrmat. Defaults 0.99. correction_limit positive integer representing upper limit correction procedure. Defaults 100.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positive definite matrices — correct_positive_definite","text":"covmat symmetric numeric matrix eigenvalues positive, correct_positive_definite simply returns covmat. eigenvalues positive correction_val positive number, correct_positive_definite tries convert covmat positive definite matrix. covmat attributes add_ind, h2, genetic_corrmat, full_corrmat phenotype_names, correct_positive_definite computes new covariance matrix using slightly modified correlation matrices genetic_corrmat full_corrmat. correction performed successfully, .e. new covariance matrix positive definite,new covariance matrix returned. Otherwise, correct_positive_definite returns original covariance matrix.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Positive definite matrices — correct_positive_definite","text":"function can used verify given covariance matrix positive definite. calculates eigenvalues order investigate whether positive. property necessary covariance matrix used Gaussian covariance matrix. especially useful check whether covariance matrix obtained construct_covmat_multi positive definite. given covariance matrix positive definite, correct_positive_definite tries modify underlying correlation matrices (called genetic_corrmat full_corrmat construct_covmat construct_covmat_multi) multiplying -diagonal entries correlation matrices given number.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/correct_positive_definite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positive definite matrices — correct_positive_definite","text":"","code":"ntrait <- 2 genetic_corrmat <- matrix(0.6, ncol = ntrait, nrow = ntrait) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(-0.25, ncol = ntrait, nrow = ntrait) diag(full_corrmat) <- 1 h2_vec <- rep(0.6, ntrait) cov <- construct_covmat(fam_vec = c(\"m\", \"f\"),   genetic_corrmat = genetic_corrmat,   h2 = h2_vec,   full_corrmat = full_corrmat) cov #>              g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 g_phenotype2 #> g_phenotype1         0.60         0.60         0.30         0.30         0.36 #> o_phenotype1         0.60         1.00         0.30         0.30         0.36 #> m_phenotype1         0.30         0.30         1.00         0.00         0.18 #> f_phenotype1         0.30         0.30         0.00         1.00         0.18 #> g_phenotype2         0.36         0.36         0.18         0.18         0.60 #> o_phenotype2         0.36        -0.25         0.18         0.18         0.60 #> m_phenotype2         0.18         0.18        -0.25         0.00         0.30 #> f_phenotype2         0.18         0.18         0.00        -0.25         0.30 #>              o_phenotype2 m_phenotype2 f_phenotype2 #> g_phenotype1         0.36         0.18         0.18 #> o_phenotype1        -0.25         0.18         0.18 #> m_phenotype1         0.18        -0.25         0.00 #> f_phenotype1         0.18         0.00        -0.25 #> g_phenotype2         0.60         0.30         0.30 #> o_phenotype2         1.00         0.30         0.30 #> m_phenotype2         0.30         1.00         0.00 #> f_phenotype2         0.30         0.00         1.00 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" \"m\" \"f\" #> attr(,\"n_fam\") #>  #> f g m o  #> 1 1 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.6 0.6 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 #> attr(,\"full_corrmat\") #>       [,1]  [,2] #> [1,]  1.00 -0.25 #> [2,] -0.25  1.00 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\" correct_positive_definite(cov) #> The specified covariance matrix is not positive definite.  #> Trying to correct the covariance matrix... #> The correction was performed successfully! All off-diagonal entries are corrected by0.656. #>              g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 g_phenotype2 #> g_phenotype1    0.6000000    0.6000000    0.3000000    0.3000000    0.2360373 #> o_phenotype1    0.6000000    1.0000000    0.3000000    0.3000000    0.2360373 #> m_phenotype1    0.3000000    0.3000000    1.0000000    0.0000000    0.1180187 #> f_phenotype1    0.3000000    0.3000000    0.0000000    1.0000000    0.1180187 #> g_phenotype2    0.2360373    0.2360373    0.1180187    0.1180187    0.6000000 #> o_phenotype2    0.2360373   -0.1639148    0.1180187    0.1180187    0.6000000 #> m_phenotype2    0.1180187    0.1180187   -0.1639148    0.0000000    0.3000000 #> f_phenotype2    0.1180187    0.1180187    0.0000000   -0.1639148    0.3000000 #>              o_phenotype2 m_phenotype2 f_phenotype2 #> g_phenotype1    0.2360373    0.1180187    0.1180187 #> o_phenotype1   -0.1639148    0.1180187    0.1180187 #> m_phenotype1    0.1180187   -0.1639148    0.0000000 #> f_phenotype1    0.1180187    0.0000000   -0.1639148 #> g_phenotype2    0.6000000    0.3000000    0.3000000 #> o_phenotype2    1.0000000    0.3000000    0.3000000 #> m_phenotype2    0.3000000    1.0000000    0.0000000 #> f_phenotype2    0.3000000    0.0000000    1.0000000 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" \"m\" \"f\" #> attr(,\"n_fam\") #>  #> f g m o  #> 1 1 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.6 0.6 #> attr(,\"genetic_corrmat\") #>           [,1]      [,2] #> [1,] 1.0000000 0.3933955 #> [2,] 0.3933955 1.0000000 #> attr(,\"full_corrmat\") #>            [,1]       [,2] #> [1,]  1.0000000 -0.1639148 #> [2,] -0.1639148  1.0000000 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_gen_liability_ltfh.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"Estimate genetic liability similar LT-FH","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_gen_liability_ltfh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"","code":"estimate_gen_liability_ltfh(   h2,   phen,   child_threshold,   parent_threshold,   status_col_offspring = \"CHILD_STATUS\",   status_col_father = \"P1_STATUS\",   status_col_mother = \"P2_STATUS\",   status_col_siblings = \"SIB_STATUS\",   number_of_siblings_col = \"NUM_SIBS\",   tol = 0.01 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_gen_liability_ltfh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"h2 Liability scale heritability trait analysed. phen tibble data.frame status genotyped individual, parents siblings. child_threshold single numeric value used threshold offspring siblings. parent_threshold single numeric value used threshold parents status_col_offspring Column name status offspring status_col_father Column name status father status_col_mother Column name status mother status_col_siblings Column name status siblings number_of_siblings_col Column name number siblings given individual tol Convergence criteria Gibbs sampler. Default 0.01, meaning standard error mean 0.01","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_gen_liability_ltfh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"Returns estimated genetic liabilities.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_gen_liability_ltfh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"","code":"phen <- data.frame( CHILD_STATUS = c(0,0), P1_STATUS = c(1,1), P2_STATUS = c(0,1), SIB_STATUS = c(1,0), NUM_SIBS = c(2,0))  h2 <- 0.5 child_threshold <- 0.7 parent_threshold <- 0.8  estimate_gen_liability_ltfh(h2, phen, child_threshold, parent_threshold) #>   CHILD_STATUS P1_STATUS P2_STATUS SIB_STATUS NUM_SIBS post_gen_liab #> 1            0         1         0          1        2     0.1556253 #> 2            0         1         1          0        0     0.3476219 #>   post_gen_liab_se #> 1      0.003051023 #> 2      0.003225214"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"estimate_liability estimates genetic component full liability /full liability number individuals based family history one phenotypes.  wrapper around estimate_liability_single estimate_liability_multi.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"","code":"estimate_liability(   .tbl = NULL,   family_graphs = NULL,   h2 = 0.5,   pid = \"PID\",   fam_id = \"fam_ID\",   role = \"role\",   family_graphs_col = \"fam_graph\",   out = c(1),   tol = 0.01,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL )"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":".tbl matrix, list data frame can converted tibble. Must least five columns hold family identifier, personal identifier, role lower upper thresholds phenotypes interest. Note role must one following abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2 Either number representing heritability liability scale single phenotype, numeric vector representing liability-scale heritabilities phenotypes. entries h2 must non-negative 1. pid string holding name column family threshs hold personal identifier(s). Defaults \"PID\". fam_id string holding name column family holds family identifier. Defaults \"fam_ID\". role string holding name column .tbl holds role.role must chosen following list abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01. genetic_corrmat Either NULL (h2 number) numeric matrix (h2 vector length > 1) holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL (h2 number) numeric matrix (h2 vector length > 1) holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritability h2 number (length(h2)=1), , tol always_add required form, function returns tibble either four six columns (depending length ). first two columns correspond columns fam_id pid ' present family. equal c(1) c(\"genetic\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively. equals c(2) c(\"full\"), third fourth column hold estimated full liability well corresponding standard error, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively, fifth sixth column hold estimated full liability well corresponding standard error, respectively. h2 numeric vector length greater 1 genetic_corrmat, full_corrmat, tol required form, function returns tibble least six columns (depending length ). first two columns correspond columns fam_id pid present tibble family. equal c(1) c(\"genetic\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively. equals c(2) c(\"full\"), third fourth columns hold estimated full liability well corresponding standard error first phenotype, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively, fifth sixth columns hold estimated full liability well corresponding standard error first phenotype, respectively. remaining columns hold estimated genetic liabilities /estimated full liabilities well corresponding standard errors remaining phenotypes.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"function can used estimate either genetic component full liability, full liability variable number traits.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"","code":"genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1 # sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\"), n_fam = NULL, add_ind = TRUE, genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, h2 = rep(.5,3), n_sim = 1, pop_prev = rep(.1,3)) estimate_liability(.tbl = sims$thresholds, h2 = rep(.5,3), genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1), phen_names = paste0(\"phenotype\", 1:3), tol = 0.01) #> The number of workers is 1 #> # A tibble: 1 × 8 #>   fam_ID   indiv_ID genetic_phenotype1_est genetic_phenotype1_se #>   <chr>    <chr>                     <dbl>                 <dbl> #> 1 fam_ID_1 fam_ID_1                  0.248               0.00588 #> # ℹ 4 more variables: genetic_phenotype2_est <dbl>, #> #   genetic_phenotype2_se <dbl>, genetic_phenotype3_est <dbl>, #> #   genetic_phenotype3_se <dbl>"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"estimate_liability_multi estimates genetic component full liability /full liability number individuals based family history variable number phenotypes.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"","code":"estimate_liability_multi(   .tbl = NULL,   family_graphs = NULL,   h2_vec,   genetic_corrmat,   full_corrmat,   phen_names = NULL,   pid = \"PID\",   fam_id = \"fam_ID\",   role = \"role\",   family_graphs_col = \"fam_graph\",   out = c(1),   tol = 0.01 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":".tbl matrix, list data frame can converted tibble. Must least seven columns hold family identifier, personal identifier, role lower upper thresholds phenotypes interest. Note role must one following abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2_vec numeric vector representing liability-scale heritabilities phenotypes. entries h2_vec must non-negative 1. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL. pid string holding name column family threshs hold personal identifier(s). Defaults \"PID\". fam_id string holding name column family holds family identifier. Defaults \"fam_ID\". role string holding name column .tbl holds role.role must chosen following list abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritabilities h2_vec, genetic_corrmat, full_corrmat, tol required form, function returns tibble least six columns (depending length ). first two columns correspond columns fam_id pid present tibble family. equal c(1) c(\"genetic\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively. equals c(2) c(\"full\"), third fourth columns hold estimated full liability well corresponding standard error first phenotype, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively, fifth sixth columns hold estimated full liability well corresponding standard error first phenotype, respectively. remaining columns hold estimated genetic liabilities /estimated full liabilities well corresponding standard errors remaining phenotypes.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"function can used estimate either genetic component full liability, full liability variable number traits.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"","code":"genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1 # sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\"), n_fam = NULL, add_ind = TRUE, genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, h2 = rep(.5,3), n_sim = 1, pop_prev = rep(.1,3)) estimate_liability_multi(.tbl = sims$thresholds, h2_vec = rep(.5,3), genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1), phen_names = paste0(\"phenotype\", 1:3), tol = 0.01) #> The number of workers is 1 #> # A tibble: 1 × 8 #>   fam_ID   indiv_ID genetic_phenotype1_est genetic_phenotype1_se #>   <chr>    <chr>                     <dbl>                 <dbl> #> 1 fam_ID_1 fam_ID_1                 -0.101               0.00744 #> # ℹ 4 more variables: genetic_phenotype2_est <dbl>, #> #   genetic_phenotype2_se <dbl>, genetic_phenotype3_est <dbl>, #> #   genetic_phenotype3_se <dbl>"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability — estimate_liability_single","title":"Estimating the genetic or full liability — estimate_liability_single","text":"estimate_liability_single estimates genetic component full liability /full liability number individuals based family history.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability — estimate_liability_single","text":"","code":"estimate_liability_single(   .tbl = NULL,   family_graphs = NULL,   h2 = 0.5,   pid = \"PID\",   fam_id = \"fam_ID\",   family_graphs_col = \"fam_graph\",   role = NULL,   out = c(1),   tol = 0.01 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability — estimate_liability_single","text":".tbl matrix, list data frame can converted tibble. Must least five columns hold family identifier, personal identifier, role lower upper thresholds. Note role must one following abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2 number representing heritability liability scale single phenotype. Must non-negative. Note liability threshold model, heritability must also 1. Defaults 0.5. pid string holding name column .tbl (family threshs) hold personal identifier(s). Defaults \"PID\". fam_id string holding name column .tbl family holds family identifier. Defaults \"fam_ID\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". role string holding name column .tbl holds role. role must chosen following list abbreviations - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability — estimate_liability_single","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritability h2, , tol always_add required form, function returns tibble either four six columns (depending length ). first two columns correspond columns fam_id pid ' present family. equal c(1) c(\"genetic\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively. equals c(2) c(\"full\"), third fourth column hold estimated full liability well corresponding standard error, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively, fifth sixth column hold estimated full liability well corresponding standard error, respectively.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability — estimate_liability_single","text":"function can used estimate either genetic component full liability, full liability . possible input either","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/estimate_liability_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability — estimate_liability_single","text":"","code":"sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL, add_ind = TRUE, h2 = 0.5, n_sim=10, pop_prev = .05) # estimate_liability_single(.tbl = sims$thresholds, h2 = 0.5, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1), tol = 0.01) #> The number of workers is 1 #> # A tibble: 10 × 4 #>    fam_ID    indiv_ID  genetic_est genetic_se #>    <chr>     <chr>           <dbl>      <dbl> #>  1 fam_ID_1  fam_ID_1     -0.00220    0.00403 #>  2 fam_ID_2  fam_ID_2     -0.0323     0.00435 #>  3 fam_ID_3  fam_ID_3      0.968      0.00175 #>  4 fam_ID_4  fam_ID_4     -0.0112     0.00411 #>  5 fam_ID_5  fam_ID_5     -0.0321     0.00413 #>  6 fam_ID_6  fam_ID_6     -0.0276     0.00429 #>  7 fam_ID_7  fam_ID_7     -0.0399     0.00435 #>  8 fam_ID_8  fam_ID_8      1.32       0.00168 #>  9 fam_ID_9  fam_ID_9     -0.0237     0.00431 #> 10 fam_ID_10 fam_ID_10    -0.0116     0.00450 # sims <- simulate_under_LTM(fam_vec = c(), n_fam = NULL, add_ind = TRUE, h2 = 0.5, n_sim=10, pop_prev = .05) #> Warning: Neither fam_vec nor n_fam is specified... # estimate_liability_single(.tbl = sims$thresholds, h2 = 0.5, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(\"genetic\"), tol = 0.01) #> The number of workers is 1 #> # A tibble: 10 × 4 #>    fam_ID    indiv_ID  genetic_est genetic_se #>    <chr>     <chr>           <dbl>      <dbl> #>  1 fam_ID_1  fam_ID_1     0.00251     0.00374 #>  2 fam_ID_2  fam_ID_2     0.000619    0.00383 #>  3 fam_ID_3  fam_ID_3    -0.00255     0.00378 #>  4 fam_ID_4  fam_ID_4    -0.000767    0.00375 #>  5 fam_ID_5  fam_ID_5     0.00378     0.00374 #>  6 fam_ID_6  fam_ID_6    -0.00589     0.00408 #>  7 fam_ID_7  fam_ID_7    -0.00115     0.00392 #>  8 fam_ID_8  fam_ID_8    -0.00738     0.00405 #>  9 fam_ID_9  fam_ID_9    -0.0105      0.00366 #> 10 fam_ID_10 fam_ID_10   -0.00541     0.00365"},{"path":"https://emilmip.github.io/LTFGRS/reference/get_all_combs.html","id":null,"dir":"Reference","previous_headings":"","what":"construct all combinations of input vector — get_all_combs","title":"construct all combinations of input vector — get_all_combs","text":"pastes together combinations input vector","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_all_combs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct all combinations of input vector — get_all_combs","text":"","code":"get_all_combs(vec)"},{"path":"https://emilmip.github.io/LTFGRS/reference/get_all_combs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct all combinations of input vector — get_all_combs","text":"vec vector strings","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_all_combs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct all combinations of input vector — get_all_combs","text":"vector strings returned.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_all_combs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"construct all combinations of input vector — get_all_combs","text":"","code":"get_all_combs(letters[1:3]) #> [1] \"b_a\" \"c_a\" \"a_b\" \"c_b\" \"a_c\" \"b_c\""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_kinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct kinship matrix from graph — get_kinship","title":"Construct kinship matrix from graph — get_kinship","text":"construct kinship matrix graph representation family, centered index person (proband).","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_kinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct kinship matrix from graph — get_kinship","text":"","code":"get_kinship(fam_graph, h2, index_id = NA, add_ind = TRUE, fix_diag = TRUE)"},{"path":"https://emilmip.github.io/LTFGRS/reference/get_kinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct kinship matrix from graph — get_kinship","text":"fam_graph graph. h2 heritability. index_id proband id. used conjuction add_ind = TRUE. add_ind add genetic liability kinship matrix. Defaults true. fix_diag Whether set diagonal 1 entries except genetic liability.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_kinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct kinship matrix from graph — get_kinship","text":"kinship matrix.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_kinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct kinship matrix from graph — get_kinship","text":"","code":"fam <- data.frame( i = c(1, 2, 3, 4), f = c(3, 0, 4, 0), m = c(2, 0, 0, 0) )  thresholds <- data.frame(   i = c(1, 2, 3, 4),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7) )  graph <- prepare_graph(fam, icol = \"i\", fcol = \"f\", mcol = \"m\", node_attributes = thresholds)  get_kinship(graph, h2 = 0.5, index_id = \"1\") #>         1    2    3     4   1_g #> 1   1.000 0.25 0.25 0.125 0.500 #> 2   0.250 1.00 0.00 0.000 0.250 #> 3   0.250 0.00 1.00 0.250 0.250 #> 4   0.125 0.00 0.25 1.000 0.125 #> 1_g 0.500 0.25 0.25 0.125 0.500"},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Relatedness between a pair of family members — get_relatedness","title":"Relatedness between a pair of family members — get_relatedness","text":"get_relatedness returns relatedness times liability-scale heritability pair family members","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relatedness between a pair of family members — get_relatedness","text":"","code":"get_relatedness(s1, s2, h2 = 0.5, from_covmat = FALSE)"},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relatedness between a pair of family members — get_relatedness","text":"s1, s2 Strings representing two family members. strings must chosen following list strings: - g (Genetic component full liability) - o (Full liability) - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side). h2 number representing squared heritability liability scale. Must non-negative 1. Defaults 0.5 from_covmat logical variable. used internally. allows skip negative check.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relatedness between a pair of family members — get_relatedness","text":"s1 s2 strings chosen mentioned list strings h2 number satisfying \\(0 \\leq h2 \\leq 1\\), output number equals percentage shared DNA s1 s2 times squared heritability h2.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relatedness between a pair of family members — get_relatedness","text":"function can used get percentage shared DNA times liability-scale heritability \\(h^2\\) two family members.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Relatedness between a pair of family members — get_relatedness","text":"interested percentage shared DNA, set h2 = 1.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/get_relatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relatedness between a pair of family members — get_relatedness","text":"","code":"get_relatedness(\"g\",\"o\") #> [1] 0.5 get_relatedness(\"g\",\"f\", h2 = 1) #> [1] 0.5 get_relatedness(\"o\",\"s\", h2 = 0.3) #> [1] 0.15   # This will result in errors: try(get_relatedness(\"a\",\"b\")) #> Error in validate_relatives(s1) :  #>   s1 contains invalid abbreviations! Use strings from the following list:  #>  #>   - g (Genetic component of full liability) #>  #>   - o (Full liability) #>  #>   - m (Mother) #>  #>   - f (Father) #>  #>   - c[0-9]*.[0-9]* (Children) #>  #>   - mgm (Maternal grandmother) #>  #>   - mgf (Maternal grandfather) #>  #>   - pgm (Paternal grandmother) #>  #>   - pgf (Paternal grandfather) #>  #>   - s[0-9]* (Full siblings) #>  #>   - mhs[0-9]* (Half-siblings - maternal side) #>  #>   - phs[0-9]* (Half-siblings - paternal side) #>  #>   - mau[0-9]* (Aunts/Uncles - maternal side) #>  #>   - pau[0-9]* (Aunts/Uncles - paternal side). try(get_relatedness(m, mhs)) #> Error in eval(expr, envir) : object 'm' not found"},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"Function constructs genetic covariance matrix given graph around proband extracts threshold information graph.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"","code":"graph_based_covariance_construction(   pid,   cur_proband_id,   cur_family_graph,   h2,   add_ind = TRUE )"},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"pid Name column personal ID cur_proband_id id proband cur_family_graph local graph current proband h2 liability scale heritability add_ind whether add genetic liability proband . Defaults true.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"list two elements. first element temp_tbl, contains id current proband, family ID lower upper thresholds. second element, cov, covariance matrix local graph centered current proband.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"","code":"fam <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   dadcol = c(\"dad\", 0, \"pgf\", 0),   momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7))  graph <- prepare_graph(fam, icol = \"id\", fcol = \"dadcol\",  mcol = \"momcol\", node_attributes = thresholds)  graph_based_covariance_construction(pid = \"id\",                                     cur_proband_id = \"pid\",                                     cur_family_graph = graph,                                     h2 = 0.5) #> $temp_tbl #> # A tibble: 5 × 3 #>   id     lower upper #>   <chr>  <dbl> <dbl> #> 1 pid_g -Inf   Inf   #> 2 pid   -Inf     0.8 #> 3 mom   -Inf     0.8 #> 4 dad      0.8   0.8 #> 5 pgf      0.7   0.7 #>  #> $covmat #>       pid_g   pid  mom  dad   pgf #> pid_g 0.500 0.500 0.25 0.25 0.125 #> pid   0.500 1.000 0.25 0.25 0.125 #> mom   0.250 0.250 1.00 0.00 0.000 #> dad   0.250 0.250 0.00 1.00 0.250 #> pgf   0.125 0.125 0.00 0.25 1.000 #>"},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"Function constructs genetic covariance matrix given graph around proband extracts threshold information graph.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"","code":"graph_based_covariance_construction_multi(   fam_id,   pid,   cur_proband_id,   cur_family_graph,   h2_vec,   genetic_corrmat,   phen_names,   add_ind = TRUE )"},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"fam_id Name column family ID pid Name column personal ID cur_proband_id id proband cur_family_graph local graph current proband h2_vec vector liability scale heritabilities genetic_corrmat matrix genetic correlations considered phenotypes. Must order h2_vec. phen_names Names phenotypes, given cur_family_graph. add_ind whether add genetic liability proband . Defaults true.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"list three elements. first element temp_tbl, contains id current proband, family ID lower upper thresholds phenotypes. second element, cov, covariance matrix local graph centred current proband. third element newOrder, order ids pid phen_names pasted together, order can enforced elsewhere .","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/graph_based_covariance_construction_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"","code":"fam <- data.frame( fam = c(1, 1, 1,1), id = c(\"pid\", \"mom\", \"dad\", \"pgf\"), dadcol = c(\"dad\", 0, \"pgf\", 0), momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower_1 = c(-Inf, -Inf, 0.8, 0.7),   upper_1 = c(0.8, 0.8, 0.8, 0.7),   lower_2 = c(-Inf, 0.3, -Inf, 0.2),   upper_2 = c(0.3, 0.3, 0.3, 0.2))  graph <- prepare_graph(fam, icol = \"id\", fcol = \"dadcol\",  mcol = \"momcol\", node_attributes = thresholds)  ntrait <- 2 genetic_corrmat <- matrix(0.2, ncol = ntrait, nrow = ntrait) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.3, ncol = ntrait, nrow = ntrait) diag(full_corrmat) <- 1 h2_vec <- rep(0.6, ntrait)  graph_based_covariance_construction_multi(fam_id = \"fam\",                                           pid = \"id\",                                           cur_proband_id = \"pid\",                                           cur_family_graph = graph,                                           h2_vec = h2_vec,                                           genetic_corrmat = genetic_corrmat,                                           phen_names = c(\"1\", \"2\")) #> $temp_tbl #> # A tibble: 5 × 6 #>   fam   id    lower_1 lower_2 upper_1 upper_2 #>   <chr> <chr>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 pid   pid_g  -Inf    -Inf     Inf     Inf   #> 2 pid   pid    -Inf    -Inf       0.8     0.3 #> 3 pid   mom    -Inf       0.3     0.8     0.3 #> 4 pid   dad       0.8  -Inf       0.8     0.3 #> 5 pid   pgf       0.7     0.2     0.7     0.2 #>  #> $cov #>         pid_g_1 pid_1 mom_1 dad_1 pgf_1 pid_g_2 pid_2 mom_2 dad_2 pgf_2 #> pid_g_1    0.60  0.60  0.30  0.30  0.15    0.12  0.12  0.06  0.06  0.03 #> pid_1      0.60  1.00  0.30  0.30  0.15    0.12  0.12  0.06  0.06  0.03 #> mom_1      0.30  0.30  1.00  0.00  0.00    0.06  0.06  0.12  0.00  0.00 #> dad_1      0.30  0.30  0.00  1.00  0.30    0.06  0.06  0.00  0.12  0.06 #> pgf_1      0.15  0.15  0.00  0.30  1.00    0.03  0.03  0.00  0.06  0.12 #> pid_g_2    0.12  0.12  0.06  0.06  0.03    0.60  0.60  0.30  0.30  0.15 #> pid_2      0.12  0.12  0.06  0.06  0.03    0.60  1.00  0.30  0.30  0.15 #> mom_2      0.06  0.06  0.12  0.00  0.00    0.30  0.30  1.00  0.00  0.00 #> dad_2      0.06  0.06  0.00  0.12  0.06    0.30  0.30  0.00  1.00  0.30 #> pgf_2      0.03  0.03  0.00  0.06  0.12    0.15  0.15  0.00  0.30  1.00 #>  #> $newOrder #>  [1] \"pid_g_1\" \"pid_1\"   \"mom_1\"   \"dad_1\"   \"pgf_1\"   \"pid_g_2\" \"pid_2\"   #>  [8] \"mom_2\"   \"dad_2\"   \"pgf_2\"   #>"},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_LTFHPlus_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares input for estimate_liability — prepare_LTFHPlus_input","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"Prepares input estimate_liability","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_LTFHPlus_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"","code":"prepare_LTFHPlus_input(   .tbl,   CIP,   age_col,   aoo_col,   CIP_merge_columns = c(\"sex\", \"birth_year\", \"age\"),   CIP_cip_col = \"cip\",   status_col = \"status\",   use_fixed_case_thr = FALSE,   fam_id_col = \"fam_id\",   personal_id_col = \"pid\",   interpolation = NULL,   bst.params = list(max_depth = 10, base_score = 0, nthread = 4, min_child_weight = 10),   min_CIP_value = 1e-05,   xgboost_itr = 50 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_LTFHPlus_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":".tbl contains family personal ids role family. CIP tibble population representative cumulative incidence proportions. CIP values merged CIP_columns. age_col name column age aoo_col name column age onset CIP_merge_columns columns CIPs subset , e.g. CIPs birth_year, sex. CIP_cip_col name column CIP values status_col Column contains status family member use_fixed_case_thr threshold fixed cases? Can used CIPs detailed, e.g. stratified birth_year sex. fam_id_col Column contains family ID personal_id_col Column contains personal ID interpolation type interpolation, defaults NULL. bst.params list parameters pass xgboost min_CIP_value minimum cip value allow, low values may lead numerical instabilities. xgboost_itr Number iterations run xgboost .","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_LTFHPlus_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"tibble formatted estimate_liability","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_LTFHPlus_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"","code":"tbl = data.frame(   fam_id = c(1, 1, 1, 1),   pid = c(1, 2, 3, 4),   role = c(\"o\", \"m\", \"f\", \"pgf\"),   sex = c(1, 0, 1, 1),   status = c(0, 0, 1, 1),   age = c(22, 42, 48, 78),   birth_year = 2023 - c(22, 42, 48, 78),   aoo = c(NA, NA, 43, 45))  cip = data.frame(   age = c(22, 42, 43, 45, 48, 78),   birth_year = c(2001, 1981, 1975, 1945, 1975, 1945),   sex = c(1, 0, 1, 1, 1, 1),   cip = c(0.1, 0.2, 0.3, 0.3, 0.3, 0.4))  prepare_LTFHPlus_input(.tbl = tbl,                        CIP = cip,                        age_col = \"age\",                        aoo_col = \"aoo\",                        interpolation = NA) #>   fam_id pid role sex status age birth_year aoo cip       thr     lower #> 1      1   1    o   1      0  22       2001  NA 0.1 1.2815516      -Inf #> 2      1   2    m   0      0  42       1981  NA 0.2 0.8416212      -Inf #> 3      1   3    f   1      1  43       1975  43 0.3 0.5244005 0.5244005 #> 4      1   4  pgf   1      1  45       1945  45 0.3 0.5244005 0.5244005 #>       upper #> 1 1.2815516 #> 2 0.8416212 #> 3       Inf #> 4       Inf"},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct graph from register information — prepare_graph","title":"Construct graph from register information — prepare_graph","text":"prepare_graph constructs graph based mother, father, offspring links.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct graph from register information — prepare_graph","text":"","code":"prepare_graph(   .tbl,   icol,   fcol,   mcol,   node_attributes = NA,   lower_col = \"lower\",   upper_col = \"upper\",   missingID_patterns = \"^0$\" )"},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct graph from register information — prepare_graph","text":".tbl tibble columns icol, fcol, mcol. Additional columns attributes constructed graph. icol column name column proband ids. fcol column name column father ids. mcol column name column mother ids. node_attributes tibble icol, lower_col upper_col. Used assign attributes node graph, e.g. lower upper thresholds individuals graph. lower_col Column name column proband's lower threshold. upper_col Column name column proband's upper threshold. missingID_patterns string missing values ID columns. Multiple values can used, must separated \"|\". Defaults \"^0$\".","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct graph from register information — prepare_graph","text":"igraph object. (directed) graph object based links provided .tbl, potentially provided attributes stored node.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/prepare_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct graph from register information — prepare_graph","text":"","code":"fam <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   dadcol = c(\"dad\", 0, \"pgf\", 0),   momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7))  prepare_graph(fam, icol = \"id\", fcol = \"dadcol\", mcol = \"momcol\", node_attributes = thresholds) #> IGRAPH 372f7b3 DN-- 4 3 --  #> + attr: name (v/c), lower (v/n), upper (v/n) #> + edges from 372f7b3 (vertex names): #> [1] dad->pid mom->pid pgf->dad"},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"rtmvnorm.gibbs implements Gibbs sampler truncated multivariate normal distribution covariance matrix covmat.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"","code":"rtmvnorm.gibbs(   n_sim = 1e+05,   covmat,   lower = -Inf,   upper,   fixed = (lower == upper),   out = c(1),   burn_in = 1000 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"n_sim positive number representing number draws Gibbs sampler burn-.. Defaults 1e+05. covmat symmetric numeric matrix representing covariance matrix multivariate normal distribution. lower number numeric vector representing lower cutoff point(s) truncated normal distribution. length lower must 1 equal dimension multivariable normal distribution. Defaults -Inf. upper number numeric vector representing upper cutoff point(s) truncated normal distribution. Must greater equal lower. addition length upper must 1 equal dimension multivariable normal distribution. Defaults Inf. fixed logical scalar logical vector indicating variables fix. fixed vector, must length lower upper. Defaults TRUE lower equal upper FALSE otherwise. integer numeric vector indicating variables returned Gibbs sampler. = c(1), first variable (usually genetic component full liability first phenotype) estimated returned. = c(2), second variable (usually full liability) estimated returned. = c(1,2), first second variable estimated returned. Defaults c(1). burn_in number iterations count burn Gibbs sampler. Must non-negative. Defaults 1000.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"covmat symmetric numeric matrix, n_sim burn_in positive/non-negative numbers, numeric vector lower, upper fixed numbers vectors length required format, rtmvnorm.gibbs returns sampling values Gibbs sampler variables specified .","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"Given covariance matrix covmat lower upper cutoff points, function rtmvnorm.gibbs() can used perform Gibbs sampler truncated multivariable normal distribution. possible specify variables return Gibbs sampler, making convenient use estimating full liability genetic component full liability.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"Kotecha, J. H., & Djuric, P. M. (1999, March). Gibbs sampling approach generation truncated multivariate gaussian random variables. 1999 IEEE International Conference Acoustics, Speech, Signal Processing. Proceedings. ICASSP99 (Cat. . 99CH36258) (Vol. 3, pp. 1757-1760). IEEE. doi:10.1109/ICASSP.1999.756335 Wilhelm, S., & Manjunath, B. G. (2010). tmvtnorm: package truncated multivariate normal distribution. R Journal. doi:10.32614/RJ-2010-005","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/rtmvnorm.gibbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"","code":"samp <- rtmvnorm.gibbs(10e3, covmat = matrix(c(1, 0.2, 0.2, 0.5), 2),                        lower = c(-Inf, 0), upper = c(0, Inf), out = 1:2)"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model. — simulate_under_LTM","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"simulate_under_LTM simulates families thresholds liability threshold model given family structure variable number phenotypes.Please note possible simulate different family structures.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"","code":"simulate_under_LTM(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL,   n_sim = 1000,   pop_prev = 0.1 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side).  Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. h2 Either number numeric vector holding liability-scale heritability(ies) one phenotypes. entries h2 must non-negative. Note liability threshold model, heritabilities must also 1. Defaults 0.5. genetic_corrmat Either NULL numeric matrix holding genetic correlations desired phenotypes. Must specified, length(h2)\\(>0\\), ignored h2 number. diagonal entries genetic_corrmat must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL numeric matrix holding full correlations desired phenotypes. Must specified, length(h2)\\(>0\\), ignored h2 number. diagonal entries full_corrmat must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. Must specified, length(h2) \\(> 0\\), ignored h2 number. specified, names default phenotype1, phenotype2, etc. Defaults NULL. n_sim positive number representing number simulations. Defaults 1000. pop_prev Either number numeric vector holding population prevalence(s), .e. overall prevalence(s) population. entries pop_prev must positive smaller 1. Defaults 0.1.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"either fam_vec n_fam used argument, required format, liability-scale heritability h2 number satisfying \\(0 \\leq h^2\\), n_sim strictly positive number, pop_prev positive number one, output list containing two tibbles. first tibble, sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families. second tibble, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families. Note tibble format required estimate_liability. either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, liability-scale heritabilities h2_vec numbers satisfying \\(0 \\leq h^2_i\\) \\(\\\\{1,...,n_pheno\\}\\), n_sim strictly positive number, pop_prev positive numeric vector entries one, output list containing following lists. first outer list, named first phenotype phen_names, holds tibble sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families first phenotype. first outer list, second outer list, named second phenotype phen_names, holds tibble sim_obs, holds  simulated liabilities, disease status current age/age--onset family members n_sim families second phenotype. list containing sim_obs phenotype phen_names. last list entry, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families phenotypes. Note tibble format required estimate_liability. Finally, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"function can used simulate case-control status, current age age--onset well lower upper thresholds variable number phenotypes family members n_sim families. h2 number, simulate_under_LTM simulates case- control status, current age age--onset well thresholds single phenotype. However, h2 numeric vector, genetic_corrmat full_corrmat two symmetric correlation matrices, phen_names pop_prev numeric vectors holding phenotype names population prevalences, respectively, simulate_under_LTM simulates case-control status, current age age--onset well thresholds two (correlated) phenotypes. family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"","code":"simulate_under_LTM() #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID        g      o      m       f     s1     mgm     mgf      pgm     pgf #>    <chr>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl>   <dbl>    <dbl>   <dbl> #>  1 fam_ID…  1.37    2.47  -0.183  0.229  -0.631 -0.995  -0.341  -0.363    0.229  #>  2 fam_ID…  1.03    1.25   1.13   2.69    1.37  -0.425  -0.630   0.0554   0.456  #>  3 fam_ID…  1.33    1.06   0.620 -0.656   1.81  -0.943   0.975  -0.335    1.64   #>  4 fam_ID… -1.40   -0.564 -1.09  -1.76   -3.10  -0.871   0.158  -1.16    -0.635  #>  5 fam_ID… -0.915  -1.11  -0.458  0.0783 -0.845 -0.295   0.529  -1.02     0.396  #>  6 fam_ID…  1.07    0.921  1.34   1.07    2.16   1.47    0.352   0.401    0.0716 #>  7 fam_ID…  0.579  -0.386 -1.12   1.05    1.41  -0.0144  0.0586 -0.00135 -0.986  #>  8 fam_ID…  0.105  -1.27  -0.231 -0.599   0.381  0.855   2.41   -0.759   -0.848  #>  9 fam_ID… -0.0266  1.30  -0.954  1.05   -1.15  -1.07   -1.41    0.0881  -0.283  #> 10 fam_ID…  0.567   0.447  0.361  0.463  -1.00   1.23    2.17    0.870    0.335  #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, f_status <lgl>, #> #   s1_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, pgm_status <lgl>, #> #   pgf_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, s1_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, pgm_aoo <dbl>, pgf_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o        2.47  2.47 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     3.42 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.48 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.35 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     2.83 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.28 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     3.52 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     2.51 #>  9 fam_ID_9  fam_ID_9_1  o        1.30  1.30 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     3.28 #> # ℹ 7,990 more rows #>   genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1  simulate_under_LTM(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\"))) #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID        g       o       m    mgm     mgf       s1      s2   mhs1   mhs2 #>    <chr>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>    <dbl>   <dbl>  <dbl>  <dbl> #>  1 fam_ID…  0.157   0.329   0.480  -0.843 -0.496  -0.186   -0.0217 -0.439 -0.507 #>  2 fam_ID… -1.56   -1.24   -1.71   -0.222 -1.46   -0.478    0.175  -1.23   0.176 #>  3 fam_ID… -0.384  -0.0760 -1.77   -1.10  -1.15   -1.59    -0.910  -0.531 -0.386 #>  4 fam_ID…  0.513   0.187  -0.0519  0.292 -0.772   1.40     0.868  -1.20   0.507 #>  5 fam_ID… -1.29   -1.91   -2.06   -1.14   0.0605  0.00188 -0.841  -0.475 -2.38  #>  6 fam_ID… -0.0984 -0.642  -0.802   1.44  -2.50   -1.07     0.933   0.399 -2.62  #>  7 fam_ID… -2.20   -1.99   -1.54   -0.535 -0.358  -1.94    -2.01   -2.52  -1.31  #>  8 fam_ID… -0.323  -0.311  -1.40   -0.208 -0.146  -0.827    1.02   -0.537 -1.07  #>  9 fam_ID…  0.483   3.10    1.20   -0.364 -0.805   0.350    0.550  -0.420  0.235 #> 10 fam_ID… -0.503  -1.27    0.730   1.66   1.91   -0.120   -0.352   0.926  0.465 #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, mgm_status <lgl>, #> #   mgf_status <lgl>, s1_status <lgl>, s2_status <lgl>, mhs1_status <lgl>, #> #   mhs2_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, mgm_aoo <dbl>, mgf_aoo <dbl>, #> #   s1_aoo <dbl>, s2_aoo <dbl>, mhs1_aoo <dbl>, mhs2_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.35 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     2.59 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.42 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.52 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     2.87 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     2.87 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     2.95 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     2.59 #>  9 fam_ID_9  fam_ID_9_1  o        3.10  3.10 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     3.10 #> # ℹ 7,990 more rows #>   simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL, add_ind = FALSE, genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, n_sim = 200) #> $sim_obs #> # A tibble: 200 × 10 #>    fam_ID        m      f      s1 m_status f_status s1_status m_aoo f_aoo s1_aoo #>    <chr>     <dbl>  <dbl>   <dbl> <lgl>    <lgl>    <lgl>     <dbl> <dbl>  <dbl> #>  1 fam_ID_1 -1.80  -0.155 -0.625  FALSE    FALSE    FALSE        49    55     26 #>  2 fam_ID_2 -0.384  0.272 -1.45   FALSE    FALSE    FALSE        46    45     26 #>  3 fam_ID_3 -0.571 -1.07  -0.979  FALSE    FALSE    FALSE        52    46     22 #>  4 fam_ID_4  1.31  -0.456 -0.0634 TRUE     FALSE    FALSE        83    46     18 #>  5 fam_ID_5  0.326  0.155 -0.851  FALSE    FALSE    FALSE        62    55     37 #>  6 fam_ID_6  0.322  0.812  0.264  FALSE    FALSE    FALSE        53    64     35 #>  7 fam_ID_7  1.40   1.31   1.55   TRUE     TRUE     TRUE         71    83     63 #>  8 fam_ID_8  1.22   0.179  0.606  FALSE    FALSE    FALSE        44    39     16 #>  9 fam_ID_9  0.314  1.20   1.79   FALSE    FALSE    TRUE         39    41     56 #> 10 fam_ID_… -1.05  -0.354 -0.909  FALSE    FALSE    FALSE        39    38     14 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 600 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  m     -Inf     2.05 #>  2 fam_ID_2  fam_ID_2_1  m     -Inf     2.18 #>  3 fam_ID_3  fam_ID_3_1  m     -Inf     1.93 #>  4 fam_ID_4  fam_ID_4_1  m        1.31  1.31 #>  5 fam_ID_5  fam_ID_5_1  m     -Inf     1.59 #>  6 fam_ID_6  fam_ID_6_1  m     -Inf     1.89 #>  7 fam_ID_7  fam_ID_7_1  m        1.41  1.41 #>  8 fam_ID_8  fam_ID_8_1  m     -Inf     2.26 #>  9 fam_ID_9  fam_ID_9_1  m     -Inf     2.47 #> 10 fam_ID_10 fam_ID_10_1 m     -Inf     2.47 #> # ℹ 590 more rows #>   simulate_under_LTM(fam_vec = c(), n_fam = NULL, add_ind = TRUE, h2 = 0.5, n_sim = 200, pop_prev = 0.05) #> Warning: Neither fam_vec nor n_fam is specified... #> $sim_obs #> # A tibble: 200 × 5 #>    fam_ID         g       o o_status o_aoo #>    <chr>      <dbl>   <dbl> <lgl>    <dbl> #>  1 fam_ID_1   0.727  1.12   FALSE       25 #>  2 fam_ID_2   1.07   2.42   TRUE        46 #>  3 fam_ID_3   1.71   1.31   FALSE       39 #>  4 fam_ID_4  -0.257  0.388  FALSE       27 #>  5 fam_ID_5  -1.17  -1.66   FALSE       13 #>  6 fam_ID_6  -0.639 -0.0206 FALSE       15 #>  7 fam_ID_7   0.315  0.115  FALSE       10 #>  8 fam_ID_8  -0.397 -0.277  FALSE       24 #>  9 fam_ID_9   0.556  0.633  FALSE       39 #> 10 fam_ID_10  0.932  1.77   TRUE        69 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 200 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.23 #>  2 fam_ID_2  fam_ID_2_1  o        2.44  2.44 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     2.71 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.16 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.63 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.57 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     3.73 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     3.26 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     2.71 #> 10 fam_ID_10 fam_ID_10_1 o        1.78  1.78 #> # ℹ 190 more rows #>"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"simulate_under_LTM_multi simulates families thresholds liability threshold model given family structure multiple phenotypes. Please note possible simulate different family structures.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"","code":"simulate_under_LTM_multi(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   genetic_corrmat = diag(3),   full_corrmat = diag(3),   h2_vec = rep(0.5, 3),   phen_names = NULL,   n_sim = 1000,   pop_prev = rep(0.1, 3) )"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side).  Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults diag(3). full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults diag(3). h2_vec numeric vector holding liability-scale heritabilities number phenotype. entries must non-negative. Note liability threshold model, heritabilities must also 1. Defaults rep(0.5,3). phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL. n_sim positive number representing number simulations. Defaults 1000. pop_prev numeric vector holding population prevalences, .e. overall prevalences population. entries pop_prev must positive smaller 1. Defaults rep(.1,3).","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, liability-scale heritabilities h2_vec numbers satisfying \\(0 \\leq h^2_i\\) \\(\\\\{1,...,n_pheno\\}\\), n_sim strictly positive number, pop_prev positive numeric vector entries one, output list containing lists phenotype. first outer list, named first phenotype phen_names, holds tibble sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families first phenotype. first outer list, second outer list, named second phenotype phen_names, holds tibble sim_obs, holds  simulated liabilities, disease status current age/age--onset family members n_sim families second phenotype. list containing sim_obs phenotype phen_names. last list entry, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families phenotypes. Note tibble format required estimate_liability. Finally, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"","code":"simulate_under_LTM_multi() #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 s1_phenotype1 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1        0.959        1.34         1.38          0.820         2.04  #>  2 fam_ID_2        1.46         2.33        -0.548         1.43          2.03  #>  3 fam_ID_3       -0.573        0.0225      -0.481         1.46         -0.288 #>  4 fam_ID_4       -0.104       -0.343        0.848        -0.355         0.226 #>  5 fam_ID_5        0.603       -0.165        0.287        -0.640        -1.40  #>  6 fam_ID_6        0.538        0.910        0.830        -1.45          0.693 #>  7 fam_ID_7       -0.0690      -0.425       -0.0800        0.844         0.250 #>  8 fam_ID_8       -0.175        0.131       -0.885        -0.675        -0.207 #>  9 fam_ID_9       -0.718       -0.706       -0.377         0.495        -0.166 #> 10 fam_ID_10       0.379        0.373        0.978        -0.412         0.384 #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype1 <dbl>, mgf_phenotype1 <dbl>, #> #   pgm_phenotype1 <dbl>, pgf_phenotype1 <dbl>, o_phenotype1_status <lgl>, #> #   m_phenotype1_status <lgl>, f_phenotype1_status <lgl>, #> #   s1_phenotype1_status <lgl>, mgm_phenotype1_status <lgl>, #> #   mgf_phenotype1_status <lgl>, pgm_phenotype1_status <lgl>, #> #   pgf_phenotype1_status <lgl>, o_phenotype1_aoo <dbl>, … #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype2 o_phenotype2 m_phenotype2 f_phenotype2 s1_phenotype2 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1        -1.43      -0.746        -1.10        -0.444         -1.49  #>  2 fam_ID_2        -0.428     -1.34         -0.0952      -0.791          1.40  #>  3 fam_ID_3        -0.301     -0.645         1.71        -1.28           0.258 #>  4 fam_ID_4        -1.11      -2.16         -0.869       -2.03          -1.93  #>  5 fam_ID_5         0.424      1.10          0.922        0.871         -0.895 #>  6 fam_ID_6         0.114     -1.16          1.10        -1.62          -0.263 #>  7 fam_ID_7         0.993      1.45          1.31         0.0951        -0.787 #>  8 fam_ID_8         0.434      1.04         -0.585        2.83           1.05  #>  9 fam_ID_9        -0.174     -0.00258      -1.58        -1.02          -0.461 #> 10 fam_ID_10        0.424      0.970         1.06        -0.963          1.69  #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype2 <dbl>, mgf_phenotype2 <dbl>, #> #   pgm_phenotype2 <dbl>, pgf_phenotype2 <dbl>, o_phenotype2_status <lgl>, #> #   m_phenotype2_status <lgl>, f_phenotype2_status <lgl>, #> #   s1_phenotype2_status <lgl>, mgm_phenotype2_status <lgl>, #> #   mgf_phenotype2_status <lgl>, pgm_phenotype2_status <lgl>, #> #   pgf_phenotype2_status <lgl>, o_phenotype2_aoo <dbl>, … #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype3 o_phenotype3 m_phenotype3 f_phenotype3 s1_phenotype3 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1       -0.0725     -1.13          -0.784       -0.972        0.0342 #>  2 fam_ID_2        0.313       0.00468        0.990       -1.18         0.570  #>  3 fam_ID_3       -0.510      -0.928          0.570       -0.349       -0.0342 #>  4 fam_ID_4        0.0908     -0.0394         1.63         0.305        2.16   #>  5 fam_ID_5       -0.941      -1.83           0.512        0.956       -0.377  #>  6 fam_ID_6       -0.980      -0.356         -1.78        -0.548       -1.06   #>  7 fam_ID_7       -0.723      -0.798         -1.35        -0.793       -0.999  #>  8 fam_ID_8       -0.475      -1.20           0.422       -1.64         0.597  #>  9 fam_ID_9        0.655      -0.592          1.30        -1.26        -0.836  #> 10 fam_ID_10      -1.02       -0.0343         0.926       -0.677       -0.893  #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype3 <dbl>, mgf_phenotype3 <dbl>, #> #   pgm_phenotype3 <dbl>, pgf_phenotype3 <dbl>, o_phenotype3_status <lgl>, #> #   m_phenotype3_status <lgl>, f_phenotype3_status <lgl>, #> #   s1_phenotype3_status <lgl>, mgm_phenotype3_status <lgl>, #> #   mgf_phenotype3_status <lgl>, pgm_phenotype3_status <lgl>, #> #   pgf_phenotype3_status <lgl>, o_phenotype3_aoo <dbl>, … #>  #>  #> $thresholds #> # A tibble: 8,000 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 1.34             1.34          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 2.34             2.34          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o              -Inf                2.72          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o              -Inf                3.21          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o              -Inf                2.99          -Inf    #>  6 fam_ID_6  fam_ID_6_1 o              -Inf                2.59          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o              -Inf                3.21             1.45 #>  8 fam_ID_8  fam_ID_8_1 o              -Inf                2.95          -Inf    #>  9 fam_ID_9  fam_ID_9_1 o              -Inf                2.43          -Inf    #> 10 fam_ID_10 fam_ID_10… o              -Inf                2.79          -Inf    #> # ℹ 7,990 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1  simulate_under_LTM_multi(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\"))) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype1 o_phenotype1 m_phenotype1 mgm_phenotype1 mgf_phenotype1 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1       0.364         1.27         0.731         0.919          -0.485 #>  2 fam_ID_2      -1.04         -1.87        -1.70         -0.353          -0.990 #>  3 fam_ID_3      -0.634        -1.41        -0.667        -0.892          -1.71  #>  4 fam_ID_4      -0.216         0.203       -0.102        -0.195           0.679 #>  5 fam_ID_5       0.0215       -0.109       -0.187        -0.465           0.611 #>  6 fam_ID_6       0.477        -0.552       -0.365         1.49            0.318 #>  7 fam_ID_7       0.402        -0.265       -0.267        -0.703           0.211 #>  8 fam_ID_8      -0.489        -0.622       -0.882        -0.0498         -0.670 #>  9 fam_ID_9       1.00          1.17         0.394        -0.555           1.25  #> 10 fam_ID_…      -0.210         0.405        0.512        -1.04           -0.327 #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype1 <dbl>, s2_phenotype1 <dbl>, #> #   mhs1_phenotype1 <dbl>, mhs2_phenotype1 <dbl>, o_phenotype1_status <lgl>, #> #   m_phenotype1_status <lgl>, mgm_phenotype1_status <lgl>, #> #   mgf_phenotype1_status <lgl>, s1_phenotype1_status <lgl>, #> #   s2_phenotype1_status <lgl>, mhs1_phenotype1_status <lgl>, #> #   mhs2_phenotype1_status <lgl>, o_phenotype1_aoo <dbl>, … #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype2 o_phenotype2 m_phenotype2 mgm_phenotype2 mgf_phenotype2 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1      -0.0964      -0.290        -0.220         -0.820        -0.259  #>  2 fam_ID_2      -0.0480      -0.0149        0.625          0.260         1.07   #>  3 fam_ID_3      -0.406        0.941         0.587         -0.670        -0.0582 #>  4 fam_ID_4      -0.363       -0.338         1.69           1.01          0.137  #>  5 fam_ID_5       0.908        1.35          0.792          0.461        -0.771  #>  6 fam_ID_6       0.315       -0.0514       -0.552         -0.328         0.288  #>  7 fam_ID_7      -0.950       -0.129         0.515          1.33          1.85   #>  8 fam_ID_8      -0.0159      -0.567         1.02          -0.513        -1.85   #>  9 fam_ID_9      -0.581        0.112         0.142         -0.528         1.68   #> 10 fam_ID_…       0.770        0.633         1.53           1.66          0.574  #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype2 <dbl>, s2_phenotype2 <dbl>, #> #   mhs1_phenotype2 <dbl>, mhs2_phenotype2 <dbl>, o_phenotype2_status <lgl>, #> #   m_phenotype2_status <lgl>, mgm_phenotype2_status <lgl>, #> #   mgf_phenotype2_status <lgl>, s1_phenotype2_status <lgl>, #> #   s2_phenotype2_status <lgl>, mhs1_phenotype2_status <lgl>, #> #   mhs2_phenotype2_status <lgl>, o_phenotype2_aoo <dbl>, … #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype3 o_phenotype3 m_phenotype3 mgm_phenotype3 mgf_phenotype3 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1      -0.0144      -0.0573       0.130          0.0207        -0.862  #>  2 fam_ID_2       0.105       -0.232        1.72           0.366          1.80   #>  3 fam_ID_3       0.126        0.322       -0.349          0.860         -0.0310 #>  4 fam_ID_4       0.667       -0.0342       1.57          -1.03           0.448  #>  5 fam_ID_5       1.08         1.33         0.936         -0.214          0.634  #>  6 fam_ID_6       0.492        0.934        1.08           0.204          0.823  #>  7 fam_ID_7       0.560        1.76        -0.474         -0.230         -0.250  #>  8 fam_ID_8       0.501        0.737        0.0492         0.539          0.808  #>  9 fam_ID_9       1.43         1.98         2.74           2.63          -0.841  #> 10 fam_ID_…       0.228        0.624        0.524          0.944         -0.0716 #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype3 <dbl>, s2_phenotype3 <dbl>, #> #   mhs1_phenotype3 <dbl>, mhs2_phenotype3 <dbl>, o_phenotype3_status <lgl>, #> #   m_phenotype3_status <lgl>, mgm_phenotype3_status <lgl>, #> #   mgf_phenotype3_status <lgl>, s1_phenotype3_status <lgl>, #> #   s2_phenotype3_status <lgl>, mhs1_phenotype3_status <lgl>, #> #   mhs2_phenotype3_status <lgl>, o_phenotype3_aoo <dbl>, … #>  #>  #> $thresholds #> # A tibble: 8,000 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 -Inf             2.87          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 -Inf             2.87          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o                 -Inf             3.31          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o                 -Inf             2.43          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o                 -Inf             2.59             1.35 #>  6 fam_ID_6  fam_ID_6_1 o                 -Inf             3.03          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o                 -Inf             3.21          -Inf    #>  8 fam_ID_8  fam_ID_8_1 o                 -Inf             2.79          -Inf    #>  9 fam_ID_9  fam_ID_9_1 o                 -Inf             3.48          -Inf    #> 10 fam_ID_10 fam_ID_10… o                 -Inf             2.51          -Inf    #> # ℹ 7,990 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   simulate_under_LTM_multi(fam_vec = c(\"m\",\"f\",\"s1\"), add_ind = FALSE, genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, n_sim = 100) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype1 f_phenotype1 s1_phenotype1 m_phenotype1_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        1.29        -0.656        -0.519  TRUE                #>  2 fam_ID_2       -1.31         0.225        -0.430  FALSE               #>  3 fam_ID_3        0.187        0.435         0.220  FALSE               #>  4 fam_ID_4        0.0120       0.637        -0.231  FALSE               #>  5 fam_ID_5        0.199        1.46         -0.779  FALSE               #>  6 fam_ID_6        1.04        -1.28         -0.761  FALSE               #>  7 fam_ID_7       -0.233        0.581         0.365  FALSE               #>  8 fam_ID_8       -2.32         0.0143       -0.768  FALSE               #>  9 fam_ID_9       -0.659       -0.0169       -0.0988 FALSE               #> 10 fam_ID_10      -0.765       -0.0794       -1.73   FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype1_status <lgl>, s1_phenotype1_status <lgl>, #> #   m_phenotype1_aoo <dbl>, f_phenotype1_aoo <dbl>, s1_phenotype1_aoo <dbl> #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype2 f_phenotype2 s1_phenotype2 m_phenotype2_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        0.491        -1.03         0.418  FALSE               #>  2 fam_ID_2       -1.00          0.141       -0.605  FALSE               #>  3 fam_ID_3        0.991         1.35         0.787  FALSE               #>  4 fam_ID_4        0.306         0.373       -0.652  FALSE               #>  5 fam_ID_5        0.0785        1.52        -0.0798 FALSE               #>  6 fam_ID_6       -0.665        -0.928       -0.751  FALSE               #>  7 fam_ID_7       -0.587         0.732       -0.109  FALSE               #>  8 fam_ID_8        1.08         -0.769       -0.565  FALSE               #>  9 fam_ID_9       -1.52          0.369        0.487  FALSE               #> 10 fam_ID_10      -0.788         0.773       -0.322  FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype2_status <lgl>, s1_phenotype2_status <lgl>, #> #   m_phenotype2_aoo <dbl>, f_phenotype2_aoo <dbl>, s1_phenotype2_aoo <dbl> #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype3 f_phenotype3 s1_phenotype3 m_phenotype3_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        0.0131       -0.574        0.137  FALSE               #>  2 fam_ID_2       -0.387         0.634        0.0247 FALSE               #>  3 fam_ID_3        2.01         -0.632        1.24   TRUE                #>  4 fam_ID_4       -1.67          1.37        -1.10   FALSE               #>  5 fam_ID_5        2.31          0.246        1.48   TRUE                #>  6 fam_ID_6        0.816        -1.32        -1.25   FALSE               #>  7 fam_ID_7       -0.326         0.230       -0.565  FALSE               #>  8 fam_ID_8       -0.900        -0.895       -1.03   FALSE               #>  9 fam_ID_9       -0.689         0.190       -1.16   FALSE               #> 10 fam_ID_10      -2.11         -0.136       -1.80   FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype3_status <lgl>, s1_phenotype3_status <lgl>, #> #   m_phenotype3_aoo <dbl>, f_phenotype3_aoo <dbl>, s1_phenotype3_aoo <dbl> #>  #>  #> $thresholds #> # A tibble: 300 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 m                 1.29             1.29             -Inf #>  2 fam_ID_2  fam_ID_2_1 m              -Inf                1.64             -Inf #>  3 fam_ID_3  fam_ID_3_1 m              -Inf                1.45             -Inf #>  4 fam_ID_4  fam_ID_4_1 m              -Inf                2.13             -Inf #>  5 fam_ID_5  fam_ID_5_1 m              -Inf                2.18             -Inf #>  6 fam_ID_6  fam_ID_6_1 m              -Inf                1.44             -Inf #>  7 fam_ID_7  fam_ID_7_1 m              -Inf                1.54             -Inf #>  8 fam_ID_8  fam_ID_8_1 m              -Inf                2.26             -Inf #>  9 fam_ID_9  fam_ID_9_1 m              -Inf                1.81             -Inf #> 10 fam_ID_10 fam_ID_10… m              -Inf                2.22             -Inf #> # ℹ 290 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   simulate_under_LTM_multi(fam_vec = c(), n_fam = NULL, add_ind = TRUE, n_sim = 150) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype1 o_phenotype1 o_phenotype1_status o_phenotype1_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1       -0.437       -0.0939 FALSE                             15 #>  2 fam_ID_2       -0.898       -0.937  FALSE                             27 #>  3 fam_ID_3       -0.144       -0.293  FALSE                             36 #>  4 fam_ID_4       -0.492       -2.29   FALSE                             34 #>  5 fam_ID_5        1.21        -0.194  FALSE                             35 #>  6 fam_ID_6       -0.331       -0.384  FALSE                             22 #>  7 fam_ID_7        1.62         1.09   FALSE                             24 #>  8 fam_ID_8        0.377       -0.485  FALSE                             12 #>  9 fam_ID_9       -0.0210      -0.167  FALSE                             15 #> 10 fam_ID_10       0.0714      -0.639  FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype2 o_phenotype2 o_phenotype2_status o_phenotype2_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1        0.103       -0.0641 FALSE                             15 #>  2 fam_ID_2        0.523        0.384  FALSE                             27 #>  3 fam_ID_3       -0.482       -0.886  FALSE                             36 #>  4 fam_ID_4        0.565        1.10   FALSE                             34 #>  5 fam_ID_5        0.271       -0.645  FALSE                             35 #>  6 fam_ID_6       -0.946       -0.905  FALSE                             22 #>  7 fam_ID_7       -0.0989      -0.0752 FALSE                             24 #>  8 fam_ID_8        0.802        1.78   TRUE                              56 #>  9 fam_ID_9       -0.201       -0.538  FALSE                             15 #> 10 fam_ID_10      -0.452        0.795  FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype3 o_phenotype3 o_phenotype3_status o_phenotype3_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1       -0.356      -0.0968  FALSE                             15 #>  2 fam_ID_2       -0.278      -1.13    FALSE                             27 #>  3 fam_ID_3        1.12        1.96    TRUE                              51 #>  4 fam_ID_4        1.11        0.524   FALSE                             34 #>  5 fam_ID_5        0.379       0.772   FALSE                             35 #>  6 fam_ID_6        0.0283     -0.00122 FALSE                             22 #>  7 fam_ID_7        0.248       0.807   FALSE                             24 #>  8 fam_ID_8        0.117      -1.22    FALSE                             12 #>  9 fam_ID_9       -1.12       -0.290   FALSE                             15 #> 10 fam_ID_10      -0.599      -0.880   FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $thresholds #> # A tibble: 150 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 -Inf             3.38          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 -Inf             2.95          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o                 -Inf             2.59          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o                 -Inf             2.68          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o                 -Inf             2.63          -Inf    #>  6 fam_ID_6  fam_ID_6_1 o                 -Inf             3.14          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o                 -Inf             3.06          -Inf    #>  8 fam_ID_8  fam_ID_8_1 o                 -Inf             3.48             1.78 #>  9 fam_ID_9  fam_ID_9_1 o                 -Inf             3.38          -Inf    #> 10 fam_ID_10 fam_ID_10… o                 -Inf             2.83          -Inf    #> # ℹ 140 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"simulate_under_LTM_single simulates families thresholds liability threshold model given family structure single phenotype. Please note possible simulate different family structures.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"","code":"simulate_under_LTM_single(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   n_sim = 1000,   pop_prev = 0.1 )"},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"fam_vec vector strings holding different family members. family members must represented strings following list: - m (Mother) - f (Father) - c[0-9]*.[0-9]* (Children) - mgm (Maternal grandmother) - mgf (Maternal grandfather) - pgm (Paternal grandmother) - pgf (Paternal grandfather) - s[0-9]* (Full siblings) - mhs[0-9]* (Half-siblings - maternal side) - phs[0-9]* (Half-siblings - paternal side) - mau[0-9]* (Aunts/Uncles - maternal side) - pau[0-9]* (Aunts/Uncles - paternal side).  Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. h2 number representing liability-scale heritability single phenotype. Must non-negative. Note liability threshold model, heritability must also 1. Defaults 0.5. n_sim positive number representing number simulations. Defaults 1000. pop_prev positive number representing population prevalence, .e. overall prevalence population. Must smaller 1. Defaults 0.1.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"either fam_vec n_fam used argument, required format, liability-scale heritability h2 number satisfying \\(0 \\leq h^2\\), n_sim strictly positive number, pop_prev positive number one, output list holding two tibbles. first tibble, sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families. second tibble, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families. Note tibble format required estimate_liability. addition, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":[]},{"path":"https://emilmip.github.io/LTFGRS/reference/simulate_under_LTM_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"","code":"simulate_under_LTM_single() #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID      g       o       m       f       s1     mgm    mgf      pgm    pgf #>    <chr>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>   <dbl>  <dbl>    <dbl>  <dbl> #>  1 fam_I… -0.162 -0.0483  0.759  -0.0313  0.00167  0.847   0.217 -1.71    -0.597 #>  2 fam_I… -1.34   0.453  -1.40   -1.14    0.451    0.423  -0.953 -0.801   -2.70  #>  3 fam_I… -0.507  0.0789  0.420  -0.0629  0.824   -1.75    0.704  0.00638 -1.05  #>  4 fam_I…  0.700  0.153  -1.08   -1.02    1.25    -0.870  -0.373 -0.00811  0.892 #>  5 fam_I…  0.835 -0.0624  0.634   1.84    0.933    0.300   0.468 -0.277    1.85  #>  6 fam_I…  0.540  1.05    0.0659 -0.226   2.14    -1.08   -1.11  -0.354    0.854 #>  7 fam_I… -0.265  1.64    0.844   0.293  -0.777   -0.179  -0.372  1.99    -1.02  #>  8 fam_I… -1.10  -2.00   -0.205  -0.820   1.02    -0.944   1.74   0.0201  -1.19  #>  9 fam_I… -0.344  0.342   1.46    0.313   0.476   -0.0829 -0.107 -0.734    1.44  #> 10 fam_I…  0.152  1.78   -1.21   -0.510   0.949    0.204   0.130 -0.141   -0.187 #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, f_status <lgl>, #> #   s1_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, pgm_status <lgl>, #> #   pgf_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, s1_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, pgm_aoo <dbl>, pgf_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.48 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     3.52 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.17 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     2.63 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.17 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.45 #>  7 fam_ID_7  fam_ID_7_1  o        1.64  1.64 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     3.17 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     3.52 #> 10 fam_ID_10 fam_ID_10_1 o        1.78  1.78 #> # ℹ 7,990 more rows #>  simulate_under_LTM_single(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2), c(\"m\",\"mgm\",\"mgf\",\"mhs\"))) #> $sim_obs #> # A tibble: 1,000 × 20 #>    fam_ID          g      o       m     mgm     mgf   mhs1    mhs2 o_status #>    <chr>       <dbl>  <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl> <lgl>    #>  1 fam_ID_1  -0.694   0.528 -0.479  -0.567   1.08   -0.917  0.253  FALSE    #>  2 fam_ID_2  -1.11   -0.771 -0.416  -0.574  -1.18   -0.428 -0.0341 FALSE    #>  3 fam_ID_3   0.916   1.55  -0.562   0.0641 -0.0181 -0.703  0.658  TRUE     #>  4 fam_ID_4  -0.0715  0.381 -0.0298 -0.621   0.693   0.255 -1.17   FALSE    #>  5 fam_ID_5  -0.833  -2.43  -0.918   1.04   -1.18    0.825  1.32   FALSE    #>  6 fam_ID_6  -0.815  -0.727 -0.960  -0.534  -0.110   0.858 -0.300  FALSE    #>  7 fam_ID_7   0.484   0.364 -1.02    0.0125  1.66   -0.101 -0.632  FALSE    #>  8 fam_ID_8   0.248   1.59  -1.30    0.592   1.96    0.466 -0.588  TRUE     #>  9 fam_ID_9   0.482  -0.658  0.171   1.66    1.04    0.697  1.42   FALSE    #> 10 fam_ID_10  0.219   1.12  -0.375   0.856  -1.30   -1.66  -1.01   FALSE    #> # ℹ 990 more rows #> # ℹ 11 more variables: m_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, #> #   mhs1_status <lgl>, mhs2_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, mhs1_aoo <dbl>, mhs2_aoo <dbl> #>  #> $thresholds #> # A tibble: 6,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.35 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     2.95 #>  3 fam_ID_3  fam_ID_3_1  o        1.54  1.54 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     2.99 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.10 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     2.55 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     2.63 #>  8 fam_ID_8  fam_ID_8_1  o        1.59  1.59 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     3.28 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     2.91 #> # ℹ 5,990 more rows #>  simulate_under_LTM_single(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL, add_ind = FALSE, h2 = 0.5, n_sim = 500, pop_prev = .05) #> $sim_obs #> # A tibble: 500 × 10 #>    fam_ID          m        f      s1 m_status f_status s1_status m_aoo f_aoo #>    <chr>       <dbl>    <dbl>   <dbl> <lgl>    <lgl>    <lgl>     <dbl> <dbl> #>  1 fam_ID_1   1.25   -0.620   -0.954  FALSE    FALSE    FALSE        36    44 #>  2 fam_ID_2  -0.335  -1.60    -0.232  FALSE    FALSE    FALSE        39    36 #>  3 fam_ID_3  -0.0678 -0.236   -0.241  FALSE    FALSE    FALSE        63    57 #>  4 fam_ID_4  -0.236  -1.00    -0.0947 FALSE    FALSE    FALSE        52    63 #>  5 fam_ID_5   0.0888  0.429    0.640  FALSE    FALSE    FALSE        39    31 #>  6 fam_ID_6   1.17    0.393    1.28   FALSE    FALSE    FALSE        57    55 #>  7 fam_ID_7  -0.722  -0.00746  0.531  FALSE    FALSE    FALSE        41    42 #>  8 fam_ID_8  -0.904   1.52     0.851  FALSE    FALSE    FALSE        50    49 #>  9 fam_ID_9   0.696   0.848   -0.945  FALSE    FALSE    FALSE        49    49 #> 10 fam_ID_10 -0.511  -1.51    -1.56   FALSE    FALSE    FALSE        46    57 #> # ℹ 490 more rows #> # ℹ 1 more variable: s1_aoo <dbl> #>  #> $thresholds #> # A tibble: 1,500 × 5 #>    fam_ID    indiv_ID    role  lower upper #>    <chr>     <chr>       <chr> <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  m      -Inf  2.82 #>  2 fam_ID_2  fam_ID_2_1  m      -Inf  2.71 #>  3 fam_ID_3  fam_ID_3_1  m      -Inf  1.89 #>  4 fam_ID_4  fam_ID_4_1  m      -Inf  2.21 #>  5 fam_ID_5  fam_ID_5_1  m      -Inf  2.71 #>  6 fam_ID_6  fam_ID_6_1  m      -Inf  2.05 #>  7 fam_ID_7  fam_ID_7_1  m      -Inf  2.63 #>  8 fam_ID_8  fam_ID_8_1  m      -Inf  2.29 #>  9 fam_ID_9  fam_ID_9_1  m      -Inf  2.32 #> 10 fam_ID_10 fam_ID_10_1 m      -Inf  2.44 #> # ℹ 1,490 more rows #>  simulate_under_LTM_single(fam_vec = c(), n_fam = NULL, add_ind = TRUE, h2 = 0.5, n_sim = 200, pop_prev = 0.05) #> Warning: Neither fam_vec nor n_fam is specified... #> $sim_obs #> # A tibble: 200 × 5 #>    fam_ID           g       o o_status o_aoo #>    <chr>        <dbl>   <dbl> <lgl>    <dbl> #>  1 fam_ID_1  -0.343   -1.46   FALSE       22 #>  2 fam_ID_2  -0.00162 -0.361  FALSE       32 #>  3 fam_ID_3  -0.881   -1.82   FALSE       25 #>  4 fam_ID_4   0.669    0.315  FALSE       36 #>  5 fam_ID_5   0.627    0.964  FALSE       22 #>  6 fam_ID_6  -0.157   -0.422  FALSE       29 #>  7 fam_ID_7  -0.582   -0.628  FALSE       26 #>  8 fam_ID_8  -0.366    0.149  FALSE       38 #>  9 fam_ID_9   0.921    0.709  FALSE       15 #> 10 fam_ID_10  0.733   -0.0112 FALSE       32 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 200 × 5 #>    fam_ID    indiv_ID    role  lower upper #>    <chr>     <chr>       <chr> <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o      -Inf  3.33 #>  2 fam_ID_2  fam_ID_2_1  o      -Inf  2.97 #>  3 fam_ID_3  fam_ID_3_1  o      -Inf  3.23 #>  4 fam_ID_4  fam_ID_4_1  o      -Inf  2.82 #>  5 fam_ID_5  fam_ID_5_1  o      -Inf  3.33 #>  6 fam_ID_6  fam_ID_6_1  o      -Inf  3.09 #>  7 fam_ID_7  fam_ID_7_1  o      -Inf  3.19 #>  8 fam_ID_8  fam_ID_8_1  o      -Inf  2.75 #>  9 fam_ID_9  fam_ID_9_1  o      -Inf  3.57 #> 10 fam_ID_10 fam_ID_10_1 o      -Inf  2.97 #> # ℹ 190 more rows #>"},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"CDF for truncated normal distribution. — truncated_normal_cdf","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"truncated_normal_cdf computes cumulative density function truncated normal distribution.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"","code":"truncated_normal_cdf(   liability,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"liability number representing individual's true underlying liability. lower number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"liability number lower upper cutoff points numbers satisfying lower <= upper, truncated_normal_cdf returns probability liability take value less equal liability.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"function can used compute value cumulative density function truncated normal distribution given individual's true underlying liability.","code":""},{"path":"https://emilmip.github.io/LTFGRS/reference/truncated_normal_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"","code":"curve(sapply(liability, truncated_normal_cdf), from = qnorm(0.05, lower.tail = FALSE), to = 3.5,  xname = \"liability\")"}]
